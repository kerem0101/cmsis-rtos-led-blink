
cmsis-rtos-led-blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000335c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800341c  0800341c  0001341c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034b4  080034b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080034b4  080034b4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034b4  080034b4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034b4  080034b4  000134b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034b8  080034b8  000134b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080034bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000108c  2000000c  080034c8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001098  080034c8  00021098  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010661  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002500  00000000  00000000  00030695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  00032b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb0  00000000  00000000  00033b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012120  00000000  00000000  000349f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001145e  00000000  00000000  00046b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006fb17  00000000  00000000  00057f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c7a85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037c4  00000000  00000000  000c7ad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003404 	.word	0x08003404

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003404 	.word	0x08003404

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	4a06      	ldr	r2, [pc, #24]	; (8000248 <vApplicationGetIdleTaskMemory+0x28>)
 8000230:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	4a05      	ldr	r2, [pc, #20]	; (800024c <vApplicationGetIdleTaskMemory+0x2c>)
 8000236:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2280      	movs	r2, #128	; 0x80
 800023c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	46bd      	mov	sp, r7
 8000242:	b004      	add	sp, #16
 8000244:	bd80      	pop	{r7, pc}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	20000028 	.word	0x20000028
 800024c:	2000007c 	.word	0x2000007c

08000250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000250:	b5b0      	push	{r4, r5, r7, lr}
 8000252:	b08e      	sub	sp, #56	; 0x38
 8000254:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000256:	f000 fa6d 	bl	8000734 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025a:	f000 f831 	bl	80002c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025e:	f000 f8ab 	bl	80003b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000262:	f000 f879 	bl	8000358 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, Task1_Function, osPriorityNormal, 0, 128);
 8000266:	211c      	movs	r1, #28
 8000268:	187b      	adds	r3, r7, r1
 800026a:	4a11      	ldr	r2, [pc, #68]	; (80002b0 <main+0x60>)
 800026c:	ca31      	ldmia	r2!, {r0, r4, r5}
 800026e:	c331      	stmia	r3!, {r0, r4, r5}
 8000270:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000272:	c331      	stmia	r3!, {r0, r4, r5}
 8000274:	6812      	ldr	r2, [r2, #0]
 8000276:	601a      	str	r2, [r3, #0]
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 8000278:	187b      	adds	r3, r7, r1
 800027a:	2100      	movs	r1, #0
 800027c:	0018      	movs	r0, r3
 800027e:	f002 f812 	bl	80022a6 <osThreadCreate>
 8000282:	0002      	movs	r2, r0
 8000284:	4b0b      	ldr	r3, [pc, #44]	; (80002b4 <main+0x64>)
 8000286:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, Task2_Function, osPriorityNormal, 0, 128);
 8000288:	003b      	movs	r3, r7
 800028a:	4a0b      	ldr	r2, [pc, #44]	; (80002b8 <main+0x68>)
 800028c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800028e:	c313      	stmia	r3!, {r0, r1, r4}
 8000290:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000292:	c313      	stmia	r3!, {r0, r1, r4}
 8000294:	6812      	ldr	r2, [r2, #0]
 8000296:	601a      	str	r2, [r3, #0]
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8000298:	003b      	movs	r3, r7
 800029a:	2100      	movs	r1, #0
 800029c:	0018      	movs	r0, r3
 800029e:	f002 f802 	bl	80022a6 <osThreadCreate>
 80002a2:	0002      	movs	r2, r0
 80002a4:	4b05      	ldr	r3, [pc, #20]	; (80002bc <main+0x6c>)
 80002a6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002a8:	f001 fff5 	bl	8002296 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ac:	e7fe      	b.n	80002ac <main+0x5c>
 80002ae:	46c0      	nop			; (mov r8, r8)
 80002b0:	0800342c 	.word	0x0800342c
 80002b4:	20000300 	.word	0x20000300
 80002b8:	08003448 	.word	0x08003448
 80002bc:	20000304 	.word	0x20000304

080002c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c0:	b590      	push	{r4, r7, lr}
 80002c2:	b091      	sub	sp, #68	; 0x44
 80002c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c6:	2410      	movs	r4, #16
 80002c8:	193b      	adds	r3, r7, r4
 80002ca:	0018      	movs	r0, r3
 80002cc:	2330      	movs	r3, #48	; 0x30
 80002ce:	001a      	movs	r2, r3
 80002d0:	2100      	movs	r1, #0
 80002d2:	f003 f88f 	bl	80033f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d6:	003b      	movs	r3, r7
 80002d8:	0018      	movs	r0, r3
 80002da:	2310      	movs	r3, #16
 80002dc:	001a      	movs	r2, r3
 80002de:	2100      	movs	r1, #0
 80002e0:	f003 f888 	bl	80033f4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e4:	0021      	movs	r1, r4
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2202      	movs	r2, #2
 80002ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2201      	movs	r2, #1
 80002f0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2210      	movs	r2, #16
 80002f6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2202      	movs	r2, #2
 80002fc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2280      	movs	r2, #128	; 0x80
 8000302:	0212      	lsls	r2, r2, #8
 8000304:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2280      	movs	r2, #128	; 0x80
 800030a:	0352      	lsls	r2, r2, #13
 800030c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2200      	movs	r2, #0
 8000312:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000314:	187b      	adds	r3, r7, r1
 8000316:	0018      	movs	r0, r3
 8000318:	f000 fc92 	bl	8000c40 <HAL_RCC_OscConfig>
 800031c:	1e03      	subs	r3, r0, #0
 800031e:	d001      	beq.n	8000324 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000320:	f000 f8ec 	bl	80004fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000324:	003b      	movs	r3, r7
 8000326:	2207      	movs	r2, #7
 8000328:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032a:	003b      	movs	r3, r7
 800032c:	2202      	movs	r2, #2
 800032e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000330:	003b      	movs	r3, r7
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000336:	003b      	movs	r3, r7
 8000338:	2200      	movs	r2, #0
 800033a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800033c:	003b      	movs	r3, r7
 800033e:	2101      	movs	r1, #1
 8000340:	0018      	movs	r0, r3
 8000342:	f000 ff9b 	bl	800127c <HAL_RCC_ClockConfig>
 8000346:	1e03      	subs	r3, r0, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800034a:	f000 f8d7 	bl	80004fc <Error_Handler>
  }
}
 800034e:	46c0      	nop			; (mov r8, r8)
 8000350:	46bd      	mov	sp, r7
 8000352:	b011      	add	sp, #68	; 0x44
 8000354:	bd90      	pop	{r4, r7, pc}
	...

08000358 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800035c:	4b14      	ldr	r3, [pc, #80]	; (80003b0 <MX_USART2_UART_Init+0x58>)
 800035e:	4a15      	ldr	r2, [pc, #84]	; (80003b4 <MX_USART2_UART_Init+0x5c>)
 8000360:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000362:	4b13      	ldr	r3, [pc, #76]	; (80003b0 <MX_USART2_UART_Init+0x58>)
 8000364:	2296      	movs	r2, #150	; 0x96
 8000366:	0212      	lsls	r2, r2, #8
 8000368:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800036a:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <MX_USART2_UART_Init+0x58>)
 800036c:	2200      	movs	r2, #0
 800036e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000370:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <MX_USART2_UART_Init+0x58>)
 8000372:	2200      	movs	r2, #0
 8000374:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000376:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <MX_USART2_UART_Init+0x58>)
 8000378:	2200      	movs	r2, #0
 800037a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800037c:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <MX_USART2_UART_Init+0x58>)
 800037e:	220c      	movs	r2, #12
 8000380:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000382:	4b0b      	ldr	r3, [pc, #44]	; (80003b0 <MX_USART2_UART_Init+0x58>)
 8000384:	2200      	movs	r2, #0
 8000386:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000388:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <MX_USART2_UART_Init+0x58>)
 800038a:	2200      	movs	r2, #0
 800038c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800038e:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <MX_USART2_UART_Init+0x58>)
 8000390:	2200      	movs	r2, #0
 8000392:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000394:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <MX_USART2_UART_Init+0x58>)
 8000396:	2200      	movs	r2, #0
 8000398:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800039a:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <MX_USART2_UART_Init+0x58>)
 800039c:	0018      	movs	r0, r3
 800039e:	f001 fb4b 	bl	8001a38 <HAL_UART_Init>
 80003a2:	1e03      	subs	r3, r0, #0
 80003a4:	d001      	beq.n	80003aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003a6:	f000 f8a9 	bl	80004fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	2000027c 	.word	0x2000027c
 80003b4:	40004400 	.word	0x40004400

080003b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b8:	b590      	push	{r4, r7, lr}
 80003ba:	b089      	sub	sp, #36	; 0x24
 80003bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003be:	240c      	movs	r4, #12
 80003c0:	193b      	adds	r3, r7, r4
 80003c2:	0018      	movs	r0, r3
 80003c4:	2314      	movs	r3, #20
 80003c6:	001a      	movs	r2, r3
 80003c8:	2100      	movs	r1, #0
 80003ca:	f003 f813 	bl	80033f4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ce:	4b2d      	ldr	r3, [pc, #180]	; (8000484 <MX_GPIO_Init+0xcc>)
 80003d0:	695a      	ldr	r2, [r3, #20]
 80003d2:	4b2c      	ldr	r3, [pc, #176]	; (8000484 <MX_GPIO_Init+0xcc>)
 80003d4:	2180      	movs	r1, #128	; 0x80
 80003d6:	0309      	lsls	r1, r1, #12
 80003d8:	430a      	orrs	r2, r1
 80003da:	615a      	str	r2, [r3, #20]
 80003dc:	4b29      	ldr	r3, [pc, #164]	; (8000484 <MX_GPIO_Init+0xcc>)
 80003de:	695a      	ldr	r2, [r3, #20]
 80003e0:	2380      	movs	r3, #128	; 0x80
 80003e2:	031b      	lsls	r3, r3, #12
 80003e4:	4013      	ands	r3, r2
 80003e6:	60bb      	str	r3, [r7, #8]
 80003e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003ea:	4b26      	ldr	r3, [pc, #152]	; (8000484 <MX_GPIO_Init+0xcc>)
 80003ec:	695a      	ldr	r2, [r3, #20]
 80003ee:	4b25      	ldr	r3, [pc, #148]	; (8000484 <MX_GPIO_Init+0xcc>)
 80003f0:	2180      	movs	r1, #128	; 0x80
 80003f2:	03c9      	lsls	r1, r1, #15
 80003f4:	430a      	orrs	r2, r1
 80003f6:	615a      	str	r2, [r3, #20]
 80003f8:	4b22      	ldr	r3, [pc, #136]	; (8000484 <MX_GPIO_Init+0xcc>)
 80003fa:	695a      	ldr	r2, [r3, #20]
 80003fc:	2380      	movs	r3, #128	; 0x80
 80003fe:	03db      	lsls	r3, r3, #15
 8000400:	4013      	ands	r3, r2
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000406:	4b1f      	ldr	r3, [pc, #124]	; (8000484 <MX_GPIO_Init+0xcc>)
 8000408:	695a      	ldr	r2, [r3, #20]
 800040a:	4b1e      	ldr	r3, [pc, #120]	; (8000484 <MX_GPIO_Init+0xcc>)
 800040c:	2180      	movs	r1, #128	; 0x80
 800040e:	0289      	lsls	r1, r1, #10
 8000410:	430a      	orrs	r2, r1
 8000412:	615a      	str	r2, [r3, #20]
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <MX_GPIO_Init+0xcc>)
 8000416:	695a      	ldr	r2, [r3, #20]
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	029b      	lsls	r3, r3, #10
 800041c:	4013      	ands	r3, r2
 800041e:	603b      	str	r3, [r7, #0]
 8000420:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000422:	2390      	movs	r3, #144	; 0x90
 8000424:	05db      	lsls	r3, r3, #23
 8000426:	2200      	movs	r2, #0
 8000428:	2120      	movs	r1, #32
 800042a:	0018      	movs	r0, r3
 800042c:	f000 fbd0 	bl	8000bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000430:	193b      	adds	r3, r7, r4
 8000432:	2280      	movs	r2, #128	; 0x80
 8000434:	0192      	lsls	r2, r2, #6
 8000436:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000438:	193b      	adds	r3, r7, r4
 800043a:	2284      	movs	r2, #132	; 0x84
 800043c:	0392      	lsls	r2, r2, #14
 800043e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000440:	193b      	adds	r3, r7, r4
 8000442:	2200      	movs	r2, #0
 8000444:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000446:	193b      	adds	r3, r7, r4
 8000448:	4a0f      	ldr	r2, [pc, #60]	; (8000488 <MX_GPIO_Init+0xd0>)
 800044a:	0019      	movs	r1, r3
 800044c:	0010      	movs	r0, r2
 800044e:	f000 fa4f 	bl	80008f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000452:	0021      	movs	r1, r4
 8000454:	187b      	adds	r3, r7, r1
 8000456:	2220      	movs	r2, #32
 8000458:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045a:	187b      	adds	r3, r7, r1
 800045c:	2201      	movs	r2, #1
 800045e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000460:	187b      	adds	r3, r7, r1
 8000462:	2200      	movs	r2, #0
 8000464:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000466:	187b      	adds	r3, r7, r1
 8000468:	2200      	movs	r2, #0
 800046a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046c:	187a      	adds	r2, r7, r1
 800046e:	2390      	movs	r3, #144	; 0x90
 8000470:	05db      	lsls	r3, r3, #23
 8000472:	0011      	movs	r1, r2
 8000474:	0018      	movs	r0, r3
 8000476:	f000 fa3b 	bl	80008f0 <HAL_GPIO_Init>

}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	b009      	add	sp, #36	; 0x24
 8000480:	bd90      	pop	{r4, r7, pc}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	40021000 	.word	0x40021000
 8000488:	48000800 	.word	0x48000800

0800048c <Task1_Function>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task1_Function */
void Task1_Function(void const * argument)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  ledToggle();
 8000494:	2390      	movs	r3, #144	; 0x90
 8000496:	05db      	lsls	r3, r3, #23
 8000498:	2120      	movs	r1, #32
 800049a:	0018      	movs	r0, r3
 800049c:	f000 fbb5 	bl	8000c0a <HAL_GPIO_TogglePin>
    osDelay(1000);
 80004a0:	23fa      	movs	r3, #250	; 0xfa
 80004a2:	009b      	lsls	r3, r3, #2
 80004a4:	0018      	movs	r0, r3
 80004a6:	f001 ff4b 	bl	8002340 <osDelay>
	  ledToggle();
 80004aa:	e7f3      	b.n	8000494 <Task1_Function+0x8>

080004ac <Task2_Function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_Function */
void Task2_Function(void const * argument)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_Function */
  /* Infinite loop */
  for(;;)
  {
	  uartPrint("hello world\n");
 80004b4:	23fa      	movs	r3, #250	; 0xfa
 80004b6:	009b      	lsls	r3, r3, #2
 80004b8:	4905      	ldr	r1, [pc, #20]	; (80004d0 <Task2_Function+0x24>)
 80004ba:	4806      	ldr	r0, [pc, #24]	; (80004d4 <Task2_Function+0x28>)
 80004bc:	220c      	movs	r2, #12
 80004be:	f001 fb0f 	bl	8001ae0 <HAL_UART_Transmit>
    osDelay(1000);
 80004c2:	23fa      	movs	r3, #250	; 0xfa
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	0018      	movs	r0, r3
 80004c8:	f001 ff3a 	bl	8002340 <osDelay>
	  uartPrint("hello world\n");
 80004cc:	e7f2      	b.n	80004b4 <Task2_Function+0x8>
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	08003464 	.word	0x08003464
 80004d4:	2000027c 	.word	0x2000027c

080004d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d101      	bne.n	80004ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004ea:	f000 f937 	bl	800075c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	46bd      	mov	sp, r7
 80004f2:	b002      	add	sp, #8
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	40012c00 	.word	0x40012c00

080004fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000500:	b672      	cpsid	i
}
 8000502:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000504:	e7fe      	b.n	8000504 <Error_Handler+0x8>
	...

08000508 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800050e:	4b12      	ldr	r3, [pc, #72]	; (8000558 <HAL_MspInit+0x50>)
 8000510:	699a      	ldr	r2, [r3, #24]
 8000512:	4b11      	ldr	r3, [pc, #68]	; (8000558 <HAL_MspInit+0x50>)
 8000514:	2101      	movs	r1, #1
 8000516:	430a      	orrs	r2, r1
 8000518:	619a      	str	r2, [r3, #24]
 800051a:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <HAL_MspInit+0x50>)
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	2201      	movs	r2, #1
 8000520:	4013      	ands	r3, r2
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <HAL_MspInit+0x50>)
 8000528:	69da      	ldr	r2, [r3, #28]
 800052a:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <HAL_MspInit+0x50>)
 800052c:	2180      	movs	r1, #128	; 0x80
 800052e:	0549      	lsls	r1, r1, #21
 8000530:	430a      	orrs	r2, r1
 8000532:	61da      	str	r2, [r3, #28]
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <HAL_MspInit+0x50>)
 8000536:	69da      	ldr	r2, [r3, #28]
 8000538:	2380      	movs	r3, #128	; 0x80
 800053a:	055b      	lsls	r3, r3, #21
 800053c:	4013      	ands	r3, r2
 800053e:	603b      	str	r3, [r7, #0]
 8000540:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000542:	2302      	movs	r3, #2
 8000544:	425b      	negs	r3, r3
 8000546:	2200      	movs	r2, #0
 8000548:	2103      	movs	r1, #3
 800054a:	0018      	movs	r0, r3
 800054c:	f000 f9aa 	bl	80008a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000550:	46c0      	nop			; (mov r8, r8)
 8000552:	46bd      	mov	sp, r7
 8000554:	b002      	add	sp, #8
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40021000 	.word	0x40021000

0800055c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b08b      	sub	sp, #44	; 0x2c
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000564:	2414      	movs	r4, #20
 8000566:	193b      	adds	r3, r7, r4
 8000568:	0018      	movs	r0, r3
 800056a:	2314      	movs	r3, #20
 800056c:	001a      	movs	r2, r3
 800056e:	2100      	movs	r1, #0
 8000570:	f002 ff40 	bl	80033f4 <memset>
  if(huart->Instance==USART2)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a1c      	ldr	r2, [pc, #112]	; (80005ec <HAL_UART_MspInit+0x90>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d132      	bne.n	80005e4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800057e:	4b1c      	ldr	r3, [pc, #112]	; (80005f0 <HAL_UART_MspInit+0x94>)
 8000580:	69da      	ldr	r2, [r3, #28]
 8000582:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <HAL_UART_MspInit+0x94>)
 8000584:	2180      	movs	r1, #128	; 0x80
 8000586:	0289      	lsls	r1, r1, #10
 8000588:	430a      	orrs	r2, r1
 800058a:	61da      	str	r2, [r3, #28]
 800058c:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <HAL_UART_MspInit+0x94>)
 800058e:	69da      	ldr	r2, [r3, #28]
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	029b      	lsls	r3, r3, #10
 8000594:	4013      	ands	r3, r2
 8000596:	613b      	str	r3, [r7, #16]
 8000598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <HAL_UART_MspInit+0x94>)
 800059c:	695a      	ldr	r2, [r3, #20]
 800059e:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <HAL_UART_MspInit+0x94>)
 80005a0:	2180      	movs	r1, #128	; 0x80
 80005a2:	0289      	lsls	r1, r1, #10
 80005a4:	430a      	orrs	r2, r1
 80005a6:	615a      	str	r2, [r3, #20]
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <HAL_UART_MspInit+0x94>)
 80005aa:	695a      	ldr	r2, [r3, #20]
 80005ac:	2380      	movs	r3, #128	; 0x80
 80005ae:	029b      	lsls	r3, r3, #10
 80005b0:	4013      	ands	r3, r2
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80005b6:	0021      	movs	r1, r4
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	220c      	movs	r2, #12
 80005bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	2202      	movs	r2, #2
 80005c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	2203      	movs	r2, #3
 80005ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2201      	movs	r2, #1
 80005d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d6:	187a      	adds	r2, r7, r1
 80005d8:	2390      	movs	r3, #144	; 0x90
 80005da:	05db      	lsls	r3, r3, #23
 80005dc:	0011      	movs	r1, r2
 80005de:	0018      	movs	r0, r3
 80005e0:	f000 f986 	bl	80008f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005e4:	46c0      	nop			; (mov r8, r8)
 80005e6:	46bd      	mov	sp, r7
 80005e8:	b00b      	add	sp, #44	; 0x2c
 80005ea:	bd90      	pop	{r4, r7, pc}
 80005ec:	40004400 	.word	0x40004400
 80005f0:	40021000 	.word	0x40021000

080005f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	; 0x28
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2200      	movs	r2, #0
 8000608:	0019      	movs	r1, r3
 800060a:	200d      	movs	r0, #13
 800060c:	f000 f94a 	bl	80008a4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000610:	200d      	movs	r0, #13
 8000612:	f000 f95c 	bl	80008ce <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000616:	4b21      	ldr	r3, [pc, #132]	; (800069c <HAL_InitTick+0xa8>)
 8000618:	699a      	ldr	r2, [r3, #24]
 800061a:	4b20      	ldr	r3, [pc, #128]	; (800069c <HAL_InitTick+0xa8>)
 800061c:	2180      	movs	r1, #128	; 0x80
 800061e:	0109      	lsls	r1, r1, #4
 8000620:	430a      	orrs	r2, r1
 8000622:	619a      	str	r2, [r3, #24]
 8000624:	4b1d      	ldr	r3, [pc, #116]	; (800069c <HAL_InitTick+0xa8>)
 8000626:	699a      	ldr	r2, [r3, #24]
 8000628:	2380      	movs	r3, #128	; 0x80
 800062a:	011b      	lsls	r3, r3, #4
 800062c:	4013      	ands	r3, r2
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000632:	230c      	movs	r3, #12
 8000634:	18fa      	adds	r2, r7, r3
 8000636:	2310      	movs	r3, #16
 8000638:	18fb      	adds	r3, r7, r3
 800063a:	0011      	movs	r1, r2
 800063c:	0018      	movs	r0, r3
 800063e:	f000 ff71 	bl	8001524 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000642:	f000 ff59 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 8000646:	0003      	movs	r3, r0
 8000648:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800064a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064c:	4914      	ldr	r1, [pc, #80]	; (80006a0 <HAL_InitTick+0xac>)
 800064e:	0018      	movs	r0, r3
 8000650:	f7ff fd5a 	bl	8000108 <__udivsi3>
 8000654:	0003      	movs	r3, r0
 8000656:	3b01      	subs	r3, #1
 8000658:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <HAL_InitTick+0xb0>)
 800065c:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <HAL_InitTick+0xb4>)
 800065e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000660:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <HAL_InitTick+0xb0>)
 8000662:	4a12      	ldr	r2, [pc, #72]	; (80006ac <HAL_InitTick+0xb8>)
 8000664:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000666:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <HAL_InitTick+0xb0>)
 8000668:	6a3a      	ldr	r2, [r7, #32]
 800066a:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 800066c:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <HAL_InitTick+0xb0>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <HAL_InitTick+0xb0>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <HAL_InitTick+0xb0>)
 800067a:	0018      	movs	r0, r3
 800067c:	f000 ff7c 	bl	8001578 <HAL_TIM_Base_Init>
 8000680:	1e03      	subs	r3, r0, #0
 8000682:	d105      	bne.n	8000690 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000684:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <HAL_InitTick+0xb0>)
 8000686:	0018      	movs	r0, r3
 8000688:	f000 ffce 	bl	8001628 <HAL_TIM_Base_Start_IT>
 800068c:	0003      	movs	r3, r0
 800068e:	e000      	b.n	8000692 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000690:	2301      	movs	r3, #1
}
 8000692:	0018      	movs	r0, r3
 8000694:	46bd      	mov	sp, r7
 8000696:	b00a      	add	sp, #40	; 0x28
 8000698:	bd80      	pop	{r7, pc}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	40021000 	.word	0x40021000
 80006a0:	000f4240 	.word	0x000f4240
 80006a4:	20000308 	.word	0x20000308
 80006a8:	40012c00 	.word	0x40012c00
 80006ac:	000003e7 	.word	0x000003e7

080006b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <NMI_Handler+0x4>

080006b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ba:	e7fe      	b.n	80006ba <HardFault_Handler+0x4>

080006bc <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80006c0:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80006c2:	0018      	movs	r0, r3
 80006c4:	f000 fffc 	bl	80016c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80006c8:	46c0      	nop			; (mov r8, r8)
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	20000308 	.word	0x20000308

080006d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006e0:	480d      	ldr	r0, [pc, #52]	; (8000718 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e4:	480d      	ldr	r0, [pc, #52]	; (800071c <LoopForever+0x6>)
  ldr r1, =_edata
 80006e6:	490e      	ldr	r1, [pc, #56]	; (8000720 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006e8:	4a0e      	ldr	r2, [pc, #56]	; (8000724 <LoopForever+0xe>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ec:	e002      	b.n	80006f4 <LoopCopyDataInit>

080006ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006f2:	3304      	adds	r3, #4

080006f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f8:	d3f9      	bcc.n	80006ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006fa:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006fc:	4c0b      	ldr	r4, [pc, #44]	; (800072c <LoopForever+0x16>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000700:	e001      	b.n	8000706 <LoopFillZerobss>

08000702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000704:	3204      	adds	r2, #4

08000706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000708:	d3fb      	bcc.n	8000702 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800070a:	f7ff ffe3 	bl	80006d4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800070e:	f002 fe4d 	bl	80033ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000712:	f7ff fd9d 	bl	8000250 <main>

08000716 <LoopForever>:

LoopForever:
    b LoopForever
 8000716:	e7fe      	b.n	8000716 <LoopForever>
  ldr   r0, =_estack
 8000718:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800071c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000720:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000724:	080034bc 	.word	0x080034bc
  ldr r2, =_sbss
 8000728:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800072c:	20001098 	.word	0x20001098

08000730 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000730:	e7fe      	b.n	8000730 <ADC1_IRQHandler>
	...

08000734 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000738:	4b07      	ldr	r3, [pc, #28]	; (8000758 <HAL_Init+0x24>)
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <HAL_Init+0x24>)
 800073e:	2110      	movs	r1, #16
 8000740:	430a      	orrs	r2, r1
 8000742:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000744:	2003      	movs	r0, #3
 8000746:	f7ff ff55 	bl	80005f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800074a:	f7ff fedd 	bl	8000508 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800074e:	2300      	movs	r3, #0
}
 8000750:	0018      	movs	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	40022000 	.word	0x40022000

0800075c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <HAL_IncTick+0x1c>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	001a      	movs	r2, r3
 8000766:	4b05      	ldr	r3, [pc, #20]	; (800077c <HAL_IncTick+0x20>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	18d2      	adds	r2, r2, r3
 800076c:	4b03      	ldr	r3, [pc, #12]	; (800077c <HAL_IncTick+0x20>)
 800076e:	601a      	str	r2, [r3, #0]
}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	20000004 	.word	0x20000004
 800077c:	20000350 	.word	0x20000350

08000780 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  return uwTick;
 8000784:	4b02      	ldr	r3, [pc, #8]	; (8000790 <HAL_GetTick+0x10>)
 8000786:	681b      	ldr	r3, [r3, #0]
}
 8000788:	0018      	movs	r0, r3
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	20000350 	.word	0x20000350

08000794 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	0002      	movs	r2, r0
 800079c:	1dfb      	adds	r3, r7, #7
 800079e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007a0:	1dfb      	adds	r3, r7, #7
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b7f      	cmp	r3, #127	; 0x7f
 80007a6:	d809      	bhi.n	80007bc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007a8:	1dfb      	adds	r3, r7, #7
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	001a      	movs	r2, r3
 80007ae:	231f      	movs	r3, #31
 80007b0:	401a      	ands	r2, r3
 80007b2:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <__NVIC_EnableIRQ+0x30>)
 80007b4:	2101      	movs	r1, #1
 80007b6:	4091      	lsls	r1, r2
 80007b8:	000a      	movs	r2, r1
 80007ba:	601a      	str	r2, [r3, #0]
  }
}
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	b002      	add	sp, #8
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	e000e100 	.word	0xe000e100

080007c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007c8:	b590      	push	{r4, r7, lr}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	0002      	movs	r2, r0
 80007d0:	6039      	str	r1, [r7, #0]
 80007d2:	1dfb      	adds	r3, r7, #7
 80007d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007d6:	1dfb      	adds	r3, r7, #7
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b7f      	cmp	r3, #127	; 0x7f
 80007dc:	d828      	bhi.n	8000830 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007de:	4a2f      	ldr	r2, [pc, #188]	; (800089c <__NVIC_SetPriority+0xd4>)
 80007e0:	1dfb      	adds	r3, r7, #7
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	b25b      	sxtb	r3, r3
 80007e6:	089b      	lsrs	r3, r3, #2
 80007e8:	33c0      	adds	r3, #192	; 0xc0
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	589b      	ldr	r3, [r3, r2]
 80007ee:	1dfa      	adds	r2, r7, #7
 80007f0:	7812      	ldrb	r2, [r2, #0]
 80007f2:	0011      	movs	r1, r2
 80007f4:	2203      	movs	r2, #3
 80007f6:	400a      	ands	r2, r1
 80007f8:	00d2      	lsls	r2, r2, #3
 80007fa:	21ff      	movs	r1, #255	; 0xff
 80007fc:	4091      	lsls	r1, r2
 80007fe:	000a      	movs	r2, r1
 8000800:	43d2      	mvns	r2, r2
 8000802:	401a      	ands	r2, r3
 8000804:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	019b      	lsls	r3, r3, #6
 800080a:	22ff      	movs	r2, #255	; 0xff
 800080c:	401a      	ands	r2, r3
 800080e:	1dfb      	adds	r3, r7, #7
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	0018      	movs	r0, r3
 8000814:	2303      	movs	r3, #3
 8000816:	4003      	ands	r3, r0
 8000818:	00db      	lsls	r3, r3, #3
 800081a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800081c:	481f      	ldr	r0, [pc, #124]	; (800089c <__NVIC_SetPriority+0xd4>)
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	b25b      	sxtb	r3, r3
 8000824:	089b      	lsrs	r3, r3, #2
 8000826:	430a      	orrs	r2, r1
 8000828:	33c0      	adds	r3, #192	; 0xc0
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800082e:	e031      	b.n	8000894 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000830:	4a1b      	ldr	r2, [pc, #108]	; (80008a0 <__NVIC_SetPriority+0xd8>)
 8000832:	1dfb      	adds	r3, r7, #7
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	0019      	movs	r1, r3
 8000838:	230f      	movs	r3, #15
 800083a:	400b      	ands	r3, r1
 800083c:	3b08      	subs	r3, #8
 800083e:	089b      	lsrs	r3, r3, #2
 8000840:	3306      	adds	r3, #6
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	18d3      	adds	r3, r2, r3
 8000846:	3304      	adds	r3, #4
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	1dfa      	adds	r2, r7, #7
 800084c:	7812      	ldrb	r2, [r2, #0]
 800084e:	0011      	movs	r1, r2
 8000850:	2203      	movs	r2, #3
 8000852:	400a      	ands	r2, r1
 8000854:	00d2      	lsls	r2, r2, #3
 8000856:	21ff      	movs	r1, #255	; 0xff
 8000858:	4091      	lsls	r1, r2
 800085a:	000a      	movs	r2, r1
 800085c:	43d2      	mvns	r2, r2
 800085e:	401a      	ands	r2, r3
 8000860:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	019b      	lsls	r3, r3, #6
 8000866:	22ff      	movs	r2, #255	; 0xff
 8000868:	401a      	ands	r2, r3
 800086a:	1dfb      	adds	r3, r7, #7
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	0018      	movs	r0, r3
 8000870:	2303      	movs	r3, #3
 8000872:	4003      	ands	r3, r0
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000878:	4809      	ldr	r0, [pc, #36]	; (80008a0 <__NVIC_SetPriority+0xd8>)
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	001c      	movs	r4, r3
 8000880:	230f      	movs	r3, #15
 8000882:	4023      	ands	r3, r4
 8000884:	3b08      	subs	r3, #8
 8000886:	089b      	lsrs	r3, r3, #2
 8000888:	430a      	orrs	r2, r1
 800088a:	3306      	adds	r3, #6
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	18c3      	adds	r3, r0, r3
 8000890:	3304      	adds	r3, #4
 8000892:	601a      	str	r2, [r3, #0]
}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	b003      	add	sp, #12
 800089a:	bd90      	pop	{r4, r7, pc}
 800089c:	e000e100 	.word	0xe000e100
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60b9      	str	r1, [r7, #8]
 80008ac:	607a      	str	r2, [r7, #4]
 80008ae:	210f      	movs	r1, #15
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	1c02      	adds	r2, r0, #0
 80008b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80008b6:	68ba      	ldr	r2, [r7, #8]
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	b25b      	sxtb	r3, r3
 80008be:	0011      	movs	r1, r2
 80008c0:	0018      	movs	r0, r3
 80008c2:	f7ff ff81 	bl	80007c8 <__NVIC_SetPriority>
}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b004      	add	sp, #16
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	0002      	movs	r2, r0
 80008d6:	1dfb      	adds	r3, r7, #7
 80008d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008da:	1dfb      	adds	r3, r7, #7
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	b25b      	sxtb	r3, r3
 80008e0:	0018      	movs	r0, r3
 80008e2:	f7ff ff57 	bl	8000794 <__NVIC_EnableIRQ>
}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	b002      	add	sp, #8
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008fe:	e14f      	b.n	8000ba0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2101      	movs	r1, #1
 8000906:	697a      	ldr	r2, [r7, #20]
 8000908:	4091      	lsls	r1, r2
 800090a:	000a      	movs	r2, r1
 800090c:	4013      	ands	r3, r2
 800090e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d100      	bne.n	8000918 <HAL_GPIO_Init+0x28>
 8000916:	e140      	b.n	8000b9a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	2203      	movs	r2, #3
 800091e:	4013      	ands	r3, r2
 8000920:	2b01      	cmp	r3, #1
 8000922:	d005      	beq.n	8000930 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	2203      	movs	r2, #3
 800092a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800092c:	2b02      	cmp	r3, #2
 800092e:	d130      	bne.n	8000992 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	2203      	movs	r2, #3
 800093c:	409a      	lsls	r2, r3
 800093e:	0013      	movs	r3, r2
 8000940:	43da      	mvns	r2, r3
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	4013      	ands	r3, r2
 8000946:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	68da      	ldr	r2, [r3, #12]
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	409a      	lsls	r2, r3
 8000952:	0013      	movs	r3, r2
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	4313      	orrs	r3, r2
 8000958:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	693a      	ldr	r2, [r7, #16]
 800095e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000966:	2201      	movs	r2, #1
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	409a      	lsls	r2, r3
 800096c:	0013      	movs	r3, r2
 800096e:	43da      	mvns	r2, r3
 8000970:	693b      	ldr	r3, [r7, #16]
 8000972:	4013      	ands	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	091b      	lsrs	r3, r3, #4
 800097c:	2201      	movs	r2, #1
 800097e:	401a      	ands	r2, r3
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	409a      	lsls	r2, r3
 8000984:	0013      	movs	r3, r2
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	4313      	orrs	r3, r2
 800098a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	2203      	movs	r2, #3
 8000998:	4013      	ands	r3, r2
 800099a:	2b03      	cmp	r3, #3
 800099c:	d017      	beq.n	80009ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	68db      	ldr	r3, [r3, #12]
 80009a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	2203      	movs	r2, #3
 80009aa:	409a      	lsls	r2, r3
 80009ac:	0013      	movs	r3, r2
 80009ae:	43da      	mvns	r2, r3
 80009b0:	693b      	ldr	r3, [r7, #16]
 80009b2:	4013      	ands	r3, r2
 80009b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	689a      	ldr	r2, [r3, #8]
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	409a      	lsls	r2, r3
 80009c0:	0013      	movs	r3, r2
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	2203      	movs	r2, #3
 80009d4:	4013      	ands	r3, r2
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d123      	bne.n	8000a22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	08da      	lsrs	r2, r3, #3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	3208      	adds	r2, #8
 80009e2:	0092      	lsls	r2, r2, #2
 80009e4:	58d3      	ldr	r3, [r2, r3]
 80009e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	2207      	movs	r2, #7
 80009ec:	4013      	ands	r3, r2
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	220f      	movs	r2, #15
 80009f2:	409a      	lsls	r2, r3
 80009f4:	0013      	movs	r3, r2
 80009f6:	43da      	mvns	r2, r3
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	4013      	ands	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	691a      	ldr	r2, [r3, #16]
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	2107      	movs	r1, #7
 8000a06:	400b      	ands	r3, r1
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	409a      	lsls	r2, r3
 8000a0c:	0013      	movs	r3, r2
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	08da      	lsrs	r2, r3, #3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3208      	adds	r2, #8
 8000a1c:	0092      	lsls	r2, r2, #2
 8000a1e:	6939      	ldr	r1, [r7, #16]
 8000a20:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	409a      	lsls	r2, r3
 8000a30:	0013      	movs	r3, r2
 8000a32:	43da      	mvns	r2, r3
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	4013      	ands	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	2203      	movs	r2, #3
 8000a40:	401a      	ands	r2, r3
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	409a      	lsls	r2, r3
 8000a48:	0013      	movs	r3, r2
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685a      	ldr	r2, [r3, #4]
 8000a5a:	23c0      	movs	r3, #192	; 0xc0
 8000a5c:	029b      	lsls	r3, r3, #10
 8000a5e:	4013      	ands	r3, r2
 8000a60:	d100      	bne.n	8000a64 <HAL_GPIO_Init+0x174>
 8000a62:	e09a      	b.n	8000b9a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a64:	4b54      	ldr	r3, [pc, #336]	; (8000bb8 <HAL_GPIO_Init+0x2c8>)
 8000a66:	699a      	ldr	r2, [r3, #24]
 8000a68:	4b53      	ldr	r3, [pc, #332]	; (8000bb8 <HAL_GPIO_Init+0x2c8>)
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	619a      	str	r2, [r3, #24]
 8000a70:	4b51      	ldr	r3, [pc, #324]	; (8000bb8 <HAL_GPIO_Init+0x2c8>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	2201      	movs	r2, #1
 8000a76:	4013      	ands	r3, r2
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a7c:	4a4f      	ldr	r2, [pc, #316]	; (8000bbc <HAL_GPIO_Init+0x2cc>)
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	089b      	lsrs	r3, r3, #2
 8000a82:	3302      	adds	r3, #2
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	589b      	ldr	r3, [r3, r2]
 8000a88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	4013      	ands	r3, r2
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	220f      	movs	r2, #15
 8000a94:	409a      	lsls	r2, r3
 8000a96:	0013      	movs	r3, r2
 8000a98:	43da      	mvns	r2, r3
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	2390      	movs	r3, #144	; 0x90
 8000aa4:	05db      	lsls	r3, r3, #23
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d013      	beq.n	8000ad2 <HAL_GPIO_Init+0x1e2>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a44      	ldr	r2, [pc, #272]	; (8000bc0 <HAL_GPIO_Init+0x2d0>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d00d      	beq.n	8000ace <HAL_GPIO_Init+0x1de>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a43      	ldr	r2, [pc, #268]	; (8000bc4 <HAL_GPIO_Init+0x2d4>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d007      	beq.n	8000aca <HAL_GPIO_Init+0x1da>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a42      	ldr	r2, [pc, #264]	; (8000bc8 <HAL_GPIO_Init+0x2d8>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d101      	bne.n	8000ac6 <HAL_GPIO_Init+0x1d6>
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	e006      	b.n	8000ad4 <HAL_GPIO_Init+0x1e4>
 8000ac6:	2305      	movs	r3, #5
 8000ac8:	e004      	b.n	8000ad4 <HAL_GPIO_Init+0x1e4>
 8000aca:	2302      	movs	r3, #2
 8000acc:	e002      	b.n	8000ad4 <HAL_GPIO_Init+0x1e4>
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e000      	b.n	8000ad4 <HAL_GPIO_Init+0x1e4>
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	697a      	ldr	r2, [r7, #20]
 8000ad6:	2103      	movs	r1, #3
 8000ad8:	400a      	ands	r2, r1
 8000ada:	0092      	lsls	r2, r2, #2
 8000adc:	4093      	lsls	r3, r2
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ae4:	4935      	ldr	r1, [pc, #212]	; (8000bbc <HAL_GPIO_Init+0x2cc>)
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	089b      	lsrs	r3, r3, #2
 8000aea:	3302      	adds	r3, #2
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000af2:	4b36      	ldr	r3, [pc, #216]	; (8000bcc <HAL_GPIO_Init+0x2dc>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	43da      	mvns	r2, r3
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	4013      	ands	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685a      	ldr	r2, [r3, #4]
 8000b06:	2380      	movs	r3, #128	; 0x80
 8000b08:	025b      	lsls	r3, r3, #9
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	d003      	beq.n	8000b16 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b16:	4b2d      	ldr	r3, [pc, #180]	; (8000bcc <HAL_GPIO_Init+0x2dc>)
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000b1c:	4b2b      	ldr	r3, [pc, #172]	; (8000bcc <HAL_GPIO_Init+0x2dc>)
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	43da      	mvns	r2, r3
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685a      	ldr	r2, [r3, #4]
 8000b30:	2380      	movs	r3, #128	; 0x80
 8000b32:	029b      	lsls	r3, r3, #10
 8000b34:	4013      	ands	r3, r2
 8000b36:	d003      	beq.n	8000b40 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b40:	4b22      	ldr	r3, [pc, #136]	; (8000bcc <HAL_GPIO_Init+0x2dc>)
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b46:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <HAL_GPIO_Init+0x2dc>)
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	43da      	mvns	r2, r3
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	4013      	ands	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685a      	ldr	r2, [r3, #4]
 8000b5a:	2380      	movs	r3, #128	; 0x80
 8000b5c:	035b      	lsls	r3, r3, #13
 8000b5e:	4013      	ands	r3, r2
 8000b60:	d003      	beq.n	8000b6a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b6a:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <HAL_GPIO_Init+0x2dc>)
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000b70:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <HAL_GPIO_Init+0x2dc>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	43da      	mvns	r2, r3
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685a      	ldr	r2, [r3, #4]
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	039b      	lsls	r3, r3, #14
 8000b88:	4013      	ands	r3, r2
 8000b8a:	d003      	beq.n	8000b94 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b94:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <HAL_GPIO_Init+0x2dc>)
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	40da      	lsrs	r2, r3
 8000ba8:	1e13      	subs	r3, r2, #0
 8000baa:	d000      	beq.n	8000bae <HAL_GPIO_Init+0x2be>
 8000bac:	e6a8      	b.n	8000900 <HAL_GPIO_Init+0x10>
  } 
}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	46c0      	nop			; (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b006      	add	sp, #24
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	40010000 	.word	0x40010000
 8000bc0:	48000400 	.word	0x48000400
 8000bc4:	48000800 	.word	0x48000800
 8000bc8:	48000c00 	.word	0x48000c00
 8000bcc:	40010400 	.word	0x40010400

08000bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	0008      	movs	r0, r1
 8000bda:	0011      	movs	r1, r2
 8000bdc:	1cbb      	adds	r3, r7, #2
 8000bde:	1c02      	adds	r2, r0, #0
 8000be0:	801a      	strh	r2, [r3, #0]
 8000be2:	1c7b      	adds	r3, r7, #1
 8000be4:	1c0a      	adds	r2, r1, #0
 8000be6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000be8:	1c7b      	adds	r3, r7, #1
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d004      	beq.n	8000bfa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bf0:	1cbb      	adds	r3, r7, #2
 8000bf2:	881a      	ldrh	r2, [r3, #0]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bf8:	e003      	b.n	8000c02 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bfa:	1cbb      	adds	r3, r7, #2
 8000bfc:	881a      	ldrh	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b002      	add	sp, #8
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b084      	sub	sp, #16
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	000a      	movs	r2, r1
 8000c14:	1cbb      	adds	r3, r7, #2
 8000c16:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	695b      	ldr	r3, [r3, #20]
 8000c1c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c1e:	1cbb      	adds	r3, r7, #2
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	4013      	ands	r3, r2
 8000c26:	041a      	lsls	r2, r3, #16
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	1cb9      	adds	r1, r7, #2
 8000c2e:	8809      	ldrh	r1, [r1, #0]
 8000c30:	400b      	ands	r3, r1
 8000c32:	431a      	orrs	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	619a      	str	r2, [r3, #24]
}
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b004      	add	sp, #16
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d101      	bne.n	8000c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e305      	b.n	800125e <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2201      	movs	r2, #1
 8000c58:	4013      	ands	r3, r2
 8000c5a:	d100      	bne.n	8000c5e <HAL_RCC_OscConfig+0x1e>
 8000c5c:	e08d      	b.n	8000d7a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c5e:	4bc5      	ldr	r3, [pc, #788]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	220c      	movs	r2, #12
 8000c64:	4013      	ands	r3, r2
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	d00e      	beq.n	8000c88 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c6a:	4bc2      	ldr	r3, [pc, #776]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	220c      	movs	r2, #12
 8000c70:	4013      	ands	r3, r2
 8000c72:	2b08      	cmp	r3, #8
 8000c74:	d116      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x64>
 8000c76:	4bbf      	ldr	r3, [pc, #764]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000c78:	685a      	ldr	r2, [r3, #4]
 8000c7a:	23c0      	movs	r3, #192	; 0xc0
 8000c7c:	025b      	lsls	r3, r3, #9
 8000c7e:	401a      	ands	r2, r3
 8000c80:	2380      	movs	r3, #128	; 0x80
 8000c82:	025b      	lsls	r3, r3, #9
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d10d      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c88:	4bba      	ldr	r3, [pc, #744]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	2380      	movs	r3, #128	; 0x80
 8000c8e:	029b      	lsls	r3, r3, #10
 8000c90:	4013      	ands	r3, r2
 8000c92:	d100      	bne.n	8000c96 <HAL_RCC_OscConfig+0x56>
 8000c94:	e070      	b.n	8000d78 <HAL_RCC_OscConfig+0x138>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d000      	beq.n	8000ca0 <HAL_RCC_OscConfig+0x60>
 8000c9e:	e06b      	b.n	8000d78 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e2dc      	b.n	800125e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d107      	bne.n	8000cbc <HAL_RCC_OscConfig+0x7c>
 8000cac:	4bb1      	ldr	r3, [pc, #708]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4bb0      	ldr	r3, [pc, #704]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000cb2:	2180      	movs	r1, #128	; 0x80
 8000cb4:	0249      	lsls	r1, r1, #9
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	e02f      	b.n	8000d1c <HAL_RCC_OscConfig+0xdc>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d10c      	bne.n	8000cde <HAL_RCC_OscConfig+0x9e>
 8000cc4:	4bab      	ldr	r3, [pc, #684]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4baa      	ldr	r3, [pc, #680]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000cca:	49ab      	ldr	r1, [pc, #684]	; (8000f78 <HAL_RCC_OscConfig+0x338>)
 8000ccc:	400a      	ands	r2, r1
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	4ba8      	ldr	r3, [pc, #672]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4ba7      	ldr	r3, [pc, #668]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000cd6:	49a9      	ldr	r1, [pc, #676]	; (8000f7c <HAL_RCC_OscConfig+0x33c>)
 8000cd8:	400a      	ands	r2, r1
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	e01e      	b.n	8000d1c <HAL_RCC_OscConfig+0xdc>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	2b05      	cmp	r3, #5
 8000ce4:	d10e      	bne.n	8000d04 <HAL_RCC_OscConfig+0xc4>
 8000ce6:	4ba3      	ldr	r3, [pc, #652]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	4ba2      	ldr	r3, [pc, #648]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000cec:	2180      	movs	r1, #128	; 0x80
 8000cee:	02c9      	lsls	r1, r1, #11
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	4b9f      	ldr	r3, [pc, #636]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4b9e      	ldr	r3, [pc, #632]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000cfa:	2180      	movs	r1, #128	; 0x80
 8000cfc:	0249      	lsls	r1, r1, #9
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	e00b      	b.n	8000d1c <HAL_RCC_OscConfig+0xdc>
 8000d04:	4b9b      	ldr	r3, [pc, #620]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b9a      	ldr	r3, [pc, #616]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000d0a:	499b      	ldr	r1, [pc, #620]	; (8000f78 <HAL_RCC_OscConfig+0x338>)
 8000d0c:	400a      	ands	r2, r1
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	4b98      	ldr	r3, [pc, #608]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4b97      	ldr	r3, [pc, #604]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000d16:	4999      	ldr	r1, [pc, #612]	; (8000f7c <HAL_RCC_OscConfig+0x33c>)
 8000d18:	400a      	ands	r2, r1
 8000d1a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d014      	beq.n	8000d4e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d24:	f7ff fd2c 	bl	8000780 <HAL_GetTick>
 8000d28:	0003      	movs	r3, r0
 8000d2a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d2c:	e008      	b.n	8000d40 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d2e:	f7ff fd27 	bl	8000780 <HAL_GetTick>
 8000d32:	0002      	movs	r2, r0
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	2b64      	cmp	r3, #100	; 0x64
 8000d3a:	d901      	bls.n	8000d40 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	e28e      	b.n	800125e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d40:	4b8c      	ldr	r3, [pc, #560]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	029b      	lsls	r3, r3, #10
 8000d48:	4013      	ands	r3, r2
 8000d4a:	d0f0      	beq.n	8000d2e <HAL_RCC_OscConfig+0xee>
 8000d4c:	e015      	b.n	8000d7a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d4e:	f7ff fd17 	bl	8000780 <HAL_GetTick>
 8000d52:	0003      	movs	r3, r0
 8000d54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d56:	e008      	b.n	8000d6a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d58:	f7ff fd12 	bl	8000780 <HAL_GetTick>
 8000d5c:	0002      	movs	r2, r0
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	2b64      	cmp	r3, #100	; 0x64
 8000d64:	d901      	bls.n	8000d6a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000d66:	2303      	movs	r3, #3
 8000d68:	e279      	b.n	800125e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d6a:	4b82      	ldr	r3, [pc, #520]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	2380      	movs	r3, #128	; 0x80
 8000d70:	029b      	lsls	r3, r3, #10
 8000d72:	4013      	ands	r3, r2
 8000d74:	d1f0      	bne.n	8000d58 <HAL_RCC_OscConfig+0x118>
 8000d76:	e000      	b.n	8000d7a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d78:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2202      	movs	r2, #2
 8000d80:	4013      	ands	r3, r2
 8000d82:	d100      	bne.n	8000d86 <HAL_RCC_OscConfig+0x146>
 8000d84:	e06c      	b.n	8000e60 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d86:	4b7b      	ldr	r3, [pc, #492]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	d00e      	beq.n	8000dae <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d90:	4b78      	ldr	r3, [pc, #480]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	220c      	movs	r2, #12
 8000d96:	4013      	ands	r3, r2
 8000d98:	2b08      	cmp	r3, #8
 8000d9a:	d11f      	bne.n	8000ddc <HAL_RCC_OscConfig+0x19c>
 8000d9c:	4b75      	ldr	r3, [pc, #468]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000d9e:	685a      	ldr	r2, [r3, #4]
 8000da0:	23c0      	movs	r3, #192	; 0xc0
 8000da2:	025b      	lsls	r3, r3, #9
 8000da4:	401a      	ands	r2, r3
 8000da6:	2380      	movs	r3, #128	; 0x80
 8000da8:	021b      	lsls	r3, r3, #8
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d116      	bne.n	8000ddc <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dae:	4b71      	ldr	r3, [pc, #452]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2202      	movs	r2, #2
 8000db4:	4013      	ands	r3, r2
 8000db6:	d005      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x184>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d001      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	e24c      	b.n	800125e <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dc4:	4b6b      	ldr	r3, [pc, #428]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	22f8      	movs	r2, #248	; 0xf8
 8000dca:	4393      	bics	r3, r2
 8000dcc:	0019      	movs	r1, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	691b      	ldr	r3, [r3, #16]
 8000dd2:	00da      	lsls	r2, r3, #3
 8000dd4:	4b67      	ldr	r3, [pc, #412]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dda:	e041      	b.n	8000e60 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d024      	beq.n	8000e2e <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000de4:	4b63      	ldr	r3, [pc, #396]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b62      	ldr	r3, [pc, #392]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000dea:	2101      	movs	r1, #1
 8000dec:	430a      	orrs	r2, r1
 8000dee:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df0:	f7ff fcc6 	bl	8000780 <HAL_GetTick>
 8000df4:	0003      	movs	r3, r0
 8000df6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000df8:	e008      	b.n	8000e0c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dfa:	f7ff fcc1 	bl	8000780 <HAL_GetTick>
 8000dfe:	0002      	movs	r2, r0
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d901      	bls.n	8000e0c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	e228      	b.n	800125e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e0c:	4b59      	ldr	r3, [pc, #356]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2202      	movs	r2, #2
 8000e12:	4013      	ands	r3, r2
 8000e14:	d0f1      	beq.n	8000dfa <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e16:	4b57      	ldr	r3, [pc, #348]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	22f8      	movs	r2, #248	; 0xf8
 8000e1c:	4393      	bics	r3, r2
 8000e1e:	0019      	movs	r1, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	691b      	ldr	r3, [r3, #16]
 8000e24:	00da      	lsls	r2, r3, #3
 8000e26:	4b53      	ldr	r3, [pc, #332]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	e018      	b.n	8000e60 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e2e:	4b51      	ldr	r3, [pc, #324]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	4b50      	ldr	r3, [pc, #320]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000e34:	2101      	movs	r1, #1
 8000e36:	438a      	bics	r2, r1
 8000e38:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e3a:	f7ff fca1 	bl	8000780 <HAL_GetTick>
 8000e3e:	0003      	movs	r3, r0
 8000e40:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e42:	e008      	b.n	8000e56 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e44:	f7ff fc9c 	bl	8000780 <HAL_GetTick>
 8000e48:	0002      	movs	r2, r0
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d901      	bls.n	8000e56 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8000e52:	2303      	movs	r3, #3
 8000e54:	e203      	b.n	800125e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e56:	4b47      	ldr	r3, [pc, #284]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	d1f1      	bne.n	8000e44 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2208      	movs	r2, #8
 8000e66:	4013      	ands	r3, r2
 8000e68:	d036      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d019      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e72:	4b40      	ldr	r3, [pc, #256]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000e74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e76:	4b3f      	ldr	r3, [pc, #252]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000e78:	2101      	movs	r1, #1
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e7e:	f7ff fc7f 	bl	8000780 <HAL_GetTick>
 8000e82:	0003      	movs	r3, r0
 8000e84:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e86:	e008      	b.n	8000e9a <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e88:	f7ff fc7a 	bl	8000780 <HAL_GetTick>
 8000e8c:	0002      	movs	r2, r0
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d901      	bls.n	8000e9a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8000e96:	2303      	movs	r3, #3
 8000e98:	e1e1      	b.n	800125e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e9a:	4b36      	ldr	r3, [pc, #216]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	d0f1      	beq.n	8000e88 <HAL_RCC_OscConfig+0x248>
 8000ea4:	e018      	b.n	8000ed8 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ea6:	4b33      	ldr	r3, [pc, #204]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000ea8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000eaa:	4b32      	ldr	r3, [pc, #200]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000eac:	2101      	movs	r1, #1
 8000eae:	438a      	bics	r2, r1
 8000eb0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eb2:	f7ff fc65 	bl	8000780 <HAL_GetTick>
 8000eb6:	0003      	movs	r3, r0
 8000eb8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eba:	e008      	b.n	8000ece <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ebc:	f7ff fc60 	bl	8000780 <HAL_GetTick>
 8000ec0:	0002      	movs	r2, r0
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d901      	bls.n	8000ece <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e1c7      	b.n	800125e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ece:	4b29      	ldr	r3, [pc, #164]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	d1f1      	bne.n	8000ebc <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2204      	movs	r2, #4
 8000ede:	4013      	ands	r3, r2
 8000ee0:	d100      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x2a4>
 8000ee2:	e0b5      	b.n	8001050 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ee4:	201f      	movs	r0, #31
 8000ee6:	183b      	adds	r3, r7, r0
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eec:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000eee:	69da      	ldr	r2, [r3, #28]
 8000ef0:	2380      	movs	r3, #128	; 0x80
 8000ef2:	055b      	lsls	r3, r3, #21
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	d110      	bne.n	8000f1a <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ef8:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000efa:	69da      	ldr	r2, [r3, #28]
 8000efc:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000efe:	2180      	movs	r1, #128	; 0x80
 8000f00:	0549      	lsls	r1, r1, #21
 8000f02:	430a      	orrs	r2, r1
 8000f04:	61da      	str	r2, [r3, #28]
 8000f06:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000f08:	69da      	ldr	r2, [r3, #28]
 8000f0a:	2380      	movs	r3, #128	; 0x80
 8000f0c:	055b      	lsls	r3, r3, #21
 8000f0e:	4013      	ands	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f14:	183b      	adds	r3, r7, r0
 8000f16:	2201      	movs	r2, #1
 8000f18:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f1a:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <HAL_RCC_OscConfig+0x340>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	4013      	ands	r3, r2
 8000f24:	d11a      	bne.n	8000f5c <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f26:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <HAL_RCC_OscConfig+0x340>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <HAL_RCC_OscConfig+0x340>)
 8000f2c:	2180      	movs	r1, #128	; 0x80
 8000f2e:	0049      	lsls	r1, r1, #1
 8000f30:	430a      	orrs	r2, r1
 8000f32:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f34:	f7ff fc24 	bl	8000780 <HAL_GetTick>
 8000f38:	0003      	movs	r3, r0
 8000f3a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f3c:	e008      	b.n	8000f50 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f3e:	f7ff fc1f 	bl	8000780 <HAL_GetTick>
 8000f42:	0002      	movs	r2, r0
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b64      	cmp	r3, #100	; 0x64
 8000f4a:	d901      	bls.n	8000f50 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e186      	b.n	800125e <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f50:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <HAL_RCC_OscConfig+0x340>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	2380      	movs	r3, #128	; 0x80
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	4013      	ands	r3, r2
 8000f5a:	d0f0      	beq.n	8000f3e <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d10f      	bne.n	8000f84 <HAL_RCC_OscConfig+0x344>
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000f66:	6a1a      	ldr	r2, [r3, #32]
 8000f68:	4b02      	ldr	r3, [pc, #8]	; (8000f74 <HAL_RCC_OscConfig+0x334>)
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	621a      	str	r2, [r3, #32]
 8000f70:	e036      	b.n	8000fe0 <HAL_RCC_OscConfig+0x3a0>
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	40021000 	.word	0x40021000
 8000f78:	fffeffff 	.word	0xfffeffff
 8000f7c:	fffbffff 	.word	0xfffbffff
 8000f80:	40007000 	.word	0x40007000
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d10c      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x366>
 8000f8c:	4bb6      	ldr	r3, [pc, #728]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 8000f8e:	6a1a      	ldr	r2, [r3, #32]
 8000f90:	4bb5      	ldr	r3, [pc, #724]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 8000f92:	2101      	movs	r1, #1
 8000f94:	438a      	bics	r2, r1
 8000f96:	621a      	str	r2, [r3, #32]
 8000f98:	4bb3      	ldr	r3, [pc, #716]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 8000f9a:	6a1a      	ldr	r2, [r3, #32]
 8000f9c:	4bb2      	ldr	r3, [pc, #712]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 8000f9e:	2104      	movs	r1, #4
 8000fa0:	438a      	bics	r2, r1
 8000fa2:	621a      	str	r2, [r3, #32]
 8000fa4:	e01c      	b.n	8000fe0 <HAL_RCC_OscConfig+0x3a0>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	2b05      	cmp	r3, #5
 8000fac:	d10c      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x388>
 8000fae:	4bae      	ldr	r3, [pc, #696]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 8000fb0:	6a1a      	ldr	r2, [r3, #32]
 8000fb2:	4bad      	ldr	r3, [pc, #692]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 8000fb4:	2104      	movs	r1, #4
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	621a      	str	r2, [r3, #32]
 8000fba:	4bab      	ldr	r3, [pc, #684]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 8000fbc:	6a1a      	ldr	r2, [r3, #32]
 8000fbe:	4baa      	ldr	r3, [pc, #680]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	621a      	str	r2, [r3, #32]
 8000fc6:	e00b      	b.n	8000fe0 <HAL_RCC_OscConfig+0x3a0>
 8000fc8:	4ba7      	ldr	r3, [pc, #668]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 8000fca:	6a1a      	ldr	r2, [r3, #32]
 8000fcc:	4ba6      	ldr	r3, [pc, #664]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 8000fce:	2101      	movs	r1, #1
 8000fd0:	438a      	bics	r2, r1
 8000fd2:	621a      	str	r2, [r3, #32]
 8000fd4:	4ba4      	ldr	r3, [pc, #656]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 8000fd6:	6a1a      	ldr	r2, [r3, #32]
 8000fd8:	4ba3      	ldr	r3, [pc, #652]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 8000fda:	2104      	movs	r1, #4
 8000fdc:	438a      	bics	r2, r1
 8000fde:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d014      	beq.n	8001012 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe8:	f7ff fbca 	bl	8000780 <HAL_GetTick>
 8000fec:	0003      	movs	r3, r0
 8000fee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ff0:	e009      	b.n	8001006 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ff2:	f7ff fbc5 	bl	8000780 <HAL_GetTick>
 8000ff6:	0002      	movs	r2, r0
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	4a9b      	ldr	r2, [pc, #620]	; (800126c <HAL_RCC_OscConfig+0x62c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d901      	bls.n	8001006 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e12b      	b.n	800125e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001006:	4b98      	ldr	r3, [pc, #608]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 8001008:	6a1b      	ldr	r3, [r3, #32]
 800100a:	2202      	movs	r2, #2
 800100c:	4013      	ands	r3, r2
 800100e:	d0f0      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x3b2>
 8001010:	e013      	b.n	800103a <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001012:	f7ff fbb5 	bl	8000780 <HAL_GetTick>
 8001016:	0003      	movs	r3, r0
 8001018:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800101a:	e009      	b.n	8001030 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800101c:	f7ff fbb0 	bl	8000780 <HAL_GetTick>
 8001020:	0002      	movs	r2, r0
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	4a91      	ldr	r2, [pc, #580]	; (800126c <HAL_RCC_OscConfig+0x62c>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e116      	b.n	800125e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001030:	4b8d      	ldr	r3, [pc, #564]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	2202      	movs	r2, #2
 8001036:	4013      	ands	r3, r2
 8001038:	d1f0      	bne.n	800101c <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800103a:	231f      	movs	r3, #31
 800103c:	18fb      	adds	r3, r7, r3
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d105      	bne.n	8001050 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001044:	4b88      	ldr	r3, [pc, #544]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 8001046:	69da      	ldr	r2, [r3, #28]
 8001048:	4b87      	ldr	r3, [pc, #540]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 800104a:	4989      	ldr	r1, [pc, #548]	; (8001270 <HAL_RCC_OscConfig+0x630>)
 800104c:	400a      	ands	r2, r1
 800104e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2210      	movs	r2, #16
 8001056:	4013      	ands	r3, r2
 8001058:	d063      	beq.n	8001122 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d12a      	bne.n	80010b8 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001062:	4b81      	ldr	r3, [pc, #516]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 8001064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001066:	4b80      	ldr	r3, [pc, #512]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 8001068:	2104      	movs	r1, #4
 800106a:	430a      	orrs	r2, r1
 800106c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800106e:	4b7e      	ldr	r3, [pc, #504]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 8001070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001072:	4b7d      	ldr	r3, [pc, #500]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 8001074:	2101      	movs	r1, #1
 8001076:	430a      	orrs	r2, r1
 8001078:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800107a:	f7ff fb81 	bl	8000780 <HAL_GetTick>
 800107e:	0003      	movs	r3, r0
 8001080:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001084:	f7ff fb7c 	bl	8000780 <HAL_GetTick>
 8001088:	0002      	movs	r2, r0
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e0e3      	b.n	800125e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001096:	4b74      	ldr	r3, [pc, #464]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 8001098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800109a:	2202      	movs	r2, #2
 800109c:	4013      	ands	r3, r2
 800109e:	d0f1      	beq.n	8001084 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80010a0:	4b71      	ldr	r3, [pc, #452]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 80010a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a4:	22f8      	movs	r2, #248	; 0xf8
 80010a6:	4393      	bics	r3, r2
 80010a8:	0019      	movs	r1, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	00da      	lsls	r2, r3, #3
 80010b0:	4b6d      	ldr	r3, [pc, #436]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 80010b2:	430a      	orrs	r2, r1
 80010b4:	635a      	str	r2, [r3, #52]	; 0x34
 80010b6:	e034      	b.n	8001122 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	3305      	adds	r3, #5
 80010be:	d111      	bne.n	80010e4 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80010c0:	4b69      	ldr	r3, [pc, #420]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 80010c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010c4:	4b68      	ldr	r3, [pc, #416]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 80010c6:	2104      	movs	r1, #4
 80010c8:	438a      	bics	r2, r1
 80010ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80010cc:	4b66      	ldr	r3, [pc, #408]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 80010ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010d0:	22f8      	movs	r2, #248	; 0xf8
 80010d2:	4393      	bics	r3, r2
 80010d4:	0019      	movs	r1, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	00da      	lsls	r2, r3, #3
 80010dc:	4b62      	ldr	r3, [pc, #392]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 80010de:	430a      	orrs	r2, r1
 80010e0:	635a      	str	r2, [r3, #52]	; 0x34
 80010e2:	e01e      	b.n	8001122 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010e4:	4b60      	ldr	r3, [pc, #384]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 80010e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010e8:	4b5f      	ldr	r3, [pc, #380]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 80010ea:	2104      	movs	r1, #4
 80010ec:	430a      	orrs	r2, r1
 80010ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80010f0:	4b5d      	ldr	r3, [pc, #372]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 80010f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010f4:	4b5c      	ldr	r3, [pc, #368]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 80010f6:	2101      	movs	r1, #1
 80010f8:	438a      	bics	r2, r1
 80010fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010fc:	f7ff fb40 	bl	8000780 <HAL_GetTick>
 8001100:	0003      	movs	r3, r0
 8001102:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001104:	e008      	b.n	8001118 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001106:	f7ff fb3b 	bl	8000780 <HAL_GetTick>
 800110a:	0002      	movs	r2, r0
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d901      	bls.n	8001118 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e0a2      	b.n	800125e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001118:	4b53      	ldr	r3, [pc, #332]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 800111a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800111c:	2202      	movs	r2, #2
 800111e:	4013      	ands	r3, r2
 8001120:	d1f1      	bne.n	8001106 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a1b      	ldr	r3, [r3, #32]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d100      	bne.n	800112c <HAL_RCC_OscConfig+0x4ec>
 800112a:	e097      	b.n	800125c <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800112c:	4b4e      	ldr	r3, [pc, #312]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	220c      	movs	r2, #12
 8001132:	4013      	ands	r3, r2
 8001134:	2b08      	cmp	r3, #8
 8001136:	d100      	bne.n	800113a <HAL_RCC_OscConfig+0x4fa>
 8001138:	e06b      	b.n	8001212 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a1b      	ldr	r3, [r3, #32]
 800113e:	2b02      	cmp	r3, #2
 8001140:	d14c      	bne.n	80011dc <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001142:	4b49      	ldr	r3, [pc, #292]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4b48      	ldr	r3, [pc, #288]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 8001148:	494a      	ldr	r1, [pc, #296]	; (8001274 <HAL_RCC_OscConfig+0x634>)
 800114a:	400a      	ands	r2, r1
 800114c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114e:	f7ff fb17 	bl	8000780 <HAL_GetTick>
 8001152:	0003      	movs	r3, r0
 8001154:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001158:	f7ff fb12 	bl	8000780 <HAL_GetTick>
 800115c:	0002      	movs	r2, r0
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e079      	b.n	800125e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116a:	4b3f      	ldr	r3, [pc, #252]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	2380      	movs	r3, #128	; 0x80
 8001170:	049b      	lsls	r3, r3, #18
 8001172:	4013      	ands	r3, r2
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001176:	4b3c      	ldr	r3, [pc, #240]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 8001178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117a:	220f      	movs	r2, #15
 800117c:	4393      	bics	r3, r2
 800117e:	0019      	movs	r1, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001184:	4b38      	ldr	r3, [pc, #224]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 8001186:	430a      	orrs	r2, r1
 8001188:	62da      	str	r2, [r3, #44]	; 0x2c
 800118a:	4b37      	ldr	r3, [pc, #220]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	4a3a      	ldr	r2, [pc, #232]	; (8001278 <HAL_RCC_OscConfig+0x638>)
 8001190:	4013      	ands	r3, r2
 8001192:	0019      	movs	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119c:	431a      	orrs	r2, r3
 800119e:	4b32      	ldr	r3, [pc, #200]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 80011a0:	430a      	orrs	r2, r1
 80011a2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011a4:	4b30      	ldr	r3, [pc, #192]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b2f      	ldr	r3, [pc, #188]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 80011aa:	2180      	movs	r1, #128	; 0x80
 80011ac:	0449      	lsls	r1, r1, #17
 80011ae:	430a      	orrs	r2, r1
 80011b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b2:	f7ff fae5 	bl	8000780 <HAL_GetTick>
 80011b6:	0003      	movs	r3, r0
 80011b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011bc:	f7ff fae0 	bl	8000780 <HAL_GetTick>
 80011c0:	0002      	movs	r2, r0
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e047      	b.n	800125e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011ce:	4b26      	ldr	r3, [pc, #152]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	2380      	movs	r3, #128	; 0x80
 80011d4:	049b      	lsls	r3, r3, #18
 80011d6:	4013      	ands	r3, r2
 80011d8:	d0f0      	beq.n	80011bc <HAL_RCC_OscConfig+0x57c>
 80011da:	e03f      	b.n	800125c <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011dc:	4b22      	ldr	r3, [pc, #136]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b21      	ldr	r3, [pc, #132]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 80011e2:	4924      	ldr	r1, [pc, #144]	; (8001274 <HAL_RCC_OscConfig+0x634>)
 80011e4:	400a      	ands	r2, r1
 80011e6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e8:	f7ff faca 	bl	8000780 <HAL_GetTick>
 80011ec:	0003      	movs	r3, r0
 80011ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011f2:	f7ff fac5 	bl	8000780 <HAL_GetTick>
 80011f6:	0002      	movs	r2, r0
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e02c      	b.n	800125e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001204:	4b18      	ldr	r3, [pc, #96]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	049b      	lsls	r3, r3, #18
 800120c:	4013      	ands	r3, r2
 800120e:	d1f0      	bne.n	80011f2 <HAL_RCC_OscConfig+0x5b2>
 8001210:	e024      	b.n	800125c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a1b      	ldr	r3, [r3, #32]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d101      	bne.n	800121e <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e01f      	b.n	800125e <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800121e:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001224:	4b10      	ldr	r3, [pc, #64]	; (8001268 <HAL_RCC_OscConfig+0x628>)
 8001226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001228:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	23c0      	movs	r3, #192	; 0xc0
 800122e:	025b      	lsls	r3, r3, #9
 8001230:	401a      	ands	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001236:	429a      	cmp	r2, r3
 8001238:	d10e      	bne.n	8001258 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	220f      	movs	r2, #15
 800123e:	401a      	ands	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001244:	429a      	cmp	r2, r3
 8001246:	d107      	bne.n	8001258 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001248:	697a      	ldr	r2, [r7, #20]
 800124a:	23f0      	movs	r3, #240	; 0xf0
 800124c:	039b      	lsls	r3, r3, #14
 800124e:	401a      	ands	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001254:	429a      	cmp	r2, r3
 8001256:	d001      	beq.n	800125c <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e000      	b.n	800125e <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	0018      	movs	r0, r3
 8001260:	46bd      	mov	sp, r7
 8001262:	b008      	add	sp, #32
 8001264:	bd80      	pop	{r7, pc}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	40021000 	.word	0x40021000
 800126c:	00001388 	.word	0x00001388
 8001270:	efffffff 	.word	0xefffffff
 8001274:	feffffff 	.word	0xfeffffff
 8001278:	ffc27fff 	.word	0xffc27fff

0800127c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d101      	bne.n	8001290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e0b3      	b.n	80013f8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001290:	4b5b      	ldr	r3, [pc, #364]	; (8001400 <HAL_RCC_ClockConfig+0x184>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2201      	movs	r2, #1
 8001296:	4013      	ands	r3, r2
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	429a      	cmp	r2, r3
 800129c:	d911      	bls.n	80012c2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800129e:	4b58      	ldr	r3, [pc, #352]	; (8001400 <HAL_RCC_ClockConfig+0x184>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2201      	movs	r2, #1
 80012a4:	4393      	bics	r3, r2
 80012a6:	0019      	movs	r1, r3
 80012a8:	4b55      	ldr	r3, [pc, #340]	; (8001400 <HAL_RCC_ClockConfig+0x184>)
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012b0:	4b53      	ldr	r3, [pc, #332]	; (8001400 <HAL_RCC_ClockConfig+0x184>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2201      	movs	r2, #1
 80012b6:	4013      	ands	r3, r2
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d001      	beq.n	80012c2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e09a      	b.n	80013f8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2202      	movs	r2, #2
 80012c8:	4013      	ands	r3, r2
 80012ca:	d015      	beq.n	80012f8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2204      	movs	r2, #4
 80012d2:	4013      	ands	r3, r2
 80012d4:	d006      	beq.n	80012e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80012d6:	4b4b      	ldr	r3, [pc, #300]	; (8001404 <HAL_RCC_ClockConfig+0x188>)
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	4b4a      	ldr	r3, [pc, #296]	; (8001404 <HAL_RCC_ClockConfig+0x188>)
 80012dc:	21e0      	movs	r1, #224	; 0xe0
 80012de:	00c9      	lsls	r1, r1, #3
 80012e0:	430a      	orrs	r2, r1
 80012e2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012e4:	4b47      	ldr	r3, [pc, #284]	; (8001404 <HAL_RCC_ClockConfig+0x188>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	22f0      	movs	r2, #240	; 0xf0
 80012ea:	4393      	bics	r3, r2
 80012ec:	0019      	movs	r1, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	4b44      	ldr	r3, [pc, #272]	; (8001404 <HAL_RCC_ClockConfig+0x188>)
 80012f4:	430a      	orrs	r2, r1
 80012f6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2201      	movs	r2, #1
 80012fe:	4013      	ands	r3, r2
 8001300:	d040      	beq.n	8001384 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d107      	bne.n	800131a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	4b3e      	ldr	r3, [pc, #248]	; (8001404 <HAL_RCC_ClockConfig+0x188>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	2380      	movs	r3, #128	; 0x80
 8001310:	029b      	lsls	r3, r3, #10
 8001312:	4013      	ands	r3, r2
 8001314:	d114      	bne.n	8001340 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e06e      	b.n	80013f8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b02      	cmp	r3, #2
 8001320:	d107      	bne.n	8001332 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001322:	4b38      	ldr	r3, [pc, #224]	; (8001404 <HAL_RCC_ClockConfig+0x188>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	2380      	movs	r3, #128	; 0x80
 8001328:	049b      	lsls	r3, r3, #18
 800132a:	4013      	ands	r3, r2
 800132c:	d108      	bne.n	8001340 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e062      	b.n	80013f8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001332:	4b34      	ldr	r3, [pc, #208]	; (8001404 <HAL_RCC_ClockConfig+0x188>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2202      	movs	r2, #2
 8001338:	4013      	ands	r3, r2
 800133a:	d101      	bne.n	8001340 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e05b      	b.n	80013f8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001340:	4b30      	ldr	r3, [pc, #192]	; (8001404 <HAL_RCC_ClockConfig+0x188>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2203      	movs	r2, #3
 8001346:	4393      	bics	r3, r2
 8001348:	0019      	movs	r1, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	4b2d      	ldr	r3, [pc, #180]	; (8001404 <HAL_RCC_ClockConfig+0x188>)
 8001350:	430a      	orrs	r2, r1
 8001352:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001354:	f7ff fa14 	bl	8000780 <HAL_GetTick>
 8001358:	0003      	movs	r3, r0
 800135a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800135c:	e009      	b.n	8001372 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800135e:	f7ff fa0f 	bl	8000780 <HAL_GetTick>
 8001362:	0002      	movs	r2, r0
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	4a27      	ldr	r2, [pc, #156]	; (8001408 <HAL_RCC_ClockConfig+0x18c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e042      	b.n	80013f8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001372:	4b24      	ldr	r3, [pc, #144]	; (8001404 <HAL_RCC_ClockConfig+0x188>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	220c      	movs	r2, #12
 8001378:	401a      	ands	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	429a      	cmp	r2, r3
 8001382:	d1ec      	bne.n	800135e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001384:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <HAL_RCC_ClockConfig+0x184>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2201      	movs	r2, #1
 800138a:	4013      	ands	r3, r2
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	429a      	cmp	r2, r3
 8001390:	d211      	bcs.n	80013b6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001392:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <HAL_RCC_ClockConfig+0x184>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2201      	movs	r2, #1
 8001398:	4393      	bics	r3, r2
 800139a:	0019      	movs	r1, r3
 800139c:	4b18      	ldr	r3, [pc, #96]	; (8001400 <HAL_RCC_ClockConfig+0x184>)
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	430a      	orrs	r2, r1
 80013a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a4:	4b16      	ldr	r3, [pc, #88]	; (8001400 <HAL_RCC_ClockConfig+0x184>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2201      	movs	r2, #1
 80013aa:	4013      	ands	r3, r2
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d001      	beq.n	80013b6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e020      	b.n	80013f8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2204      	movs	r2, #4
 80013bc:	4013      	ands	r3, r2
 80013be:	d009      	beq.n	80013d4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80013c0:	4b10      	ldr	r3, [pc, #64]	; (8001404 <HAL_RCC_ClockConfig+0x188>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	4a11      	ldr	r2, [pc, #68]	; (800140c <HAL_RCC_ClockConfig+0x190>)
 80013c6:	4013      	ands	r3, r2
 80013c8:	0019      	movs	r1, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68da      	ldr	r2, [r3, #12]
 80013ce:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <HAL_RCC_ClockConfig+0x188>)
 80013d0:	430a      	orrs	r2, r1
 80013d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80013d4:	f000 f820 	bl	8001418 <HAL_RCC_GetSysClockFreq>
 80013d8:	0001      	movs	r1, r0
 80013da:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <HAL_RCC_ClockConfig+0x188>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	091b      	lsrs	r3, r3, #4
 80013e0:	220f      	movs	r2, #15
 80013e2:	4013      	ands	r3, r2
 80013e4:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <HAL_RCC_ClockConfig+0x194>)
 80013e6:	5cd3      	ldrb	r3, [r2, r3]
 80013e8:	000a      	movs	r2, r1
 80013ea:	40da      	lsrs	r2, r3
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <HAL_RCC_ClockConfig+0x198>)
 80013ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80013f0:	2003      	movs	r0, #3
 80013f2:	f7ff f8ff 	bl	80005f4 <HAL_InitTick>
  
  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	0018      	movs	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b004      	add	sp, #16
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40022000 	.word	0x40022000
 8001404:	40021000 	.word	0x40021000
 8001408:	00001388 	.word	0x00001388
 800140c:	fffff8ff 	.word	0xfffff8ff
 8001410:	0800349c 	.word	0x0800349c
 8001414:	20000000 	.word	0x20000000

08001418 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001418:	b590      	push	{r4, r7, lr}
 800141a:	b08f      	sub	sp, #60	; 0x3c
 800141c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800141e:	2314      	movs	r3, #20
 8001420:	18fb      	adds	r3, r7, r3
 8001422:	4a2c      	ldr	r2, [pc, #176]	; (80014d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001424:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001426:	c313      	stmia	r3!, {r0, r1, r4}
 8001428:	6812      	ldr	r2, [r2, #0]
 800142a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	4a2a      	ldr	r2, [pc, #168]	; (80014d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001430:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001432:	c313      	stmia	r3!, {r0, r1, r4}
 8001434:	6812      	ldr	r2, [r2, #0]
 8001436:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001438:	2300      	movs	r3, #0
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800143c:	2300      	movs	r3, #0
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001440:	2300      	movs	r3, #0
 8001442:	637b      	str	r3, [r7, #52]	; 0x34
 8001444:	2300      	movs	r3, #0
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001448:	2300      	movs	r3, #0
 800144a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800144c:	4b23      	ldr	r3, [pc, #140]	; (80014dc <HAL_RCC_GetSysClockFreq+0xc4>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001454:	220c      	movs	r2, #12
 8001456:	4013      	ands	r3, r2
 8001458:	2b04      	cmp	r3, #4
 800145a:	d002      	beq.n	8001462 <HAL_RCC_GetSysClockFreq+0x4a>
 800145c:	2b08      	cmp	r3, #8
 800145e:	d003      	beq.n	8001468 <HAL_RCC_GetSysClockFreq+0x50>
 8001460:	e02f      	b.n	80014c2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001462:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001464:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001466:	e02f      	b.n	80014c8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800146a:	0c9b      	lsrs	r3, r3, #18
 800146c:	220f      	movs	r2, #15
 800146e:	4013      	ands	r3, r2
 8001470:	2214      	movs	r2, #20
 8001472:	18ba      	adds	r2, r7, r2
 8001474:	5cd3      	ldrb	r3, [r2, r3]
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001478:	4b18      	ldr	r3, [pc, #96]	; (80014dc <HAL_RCC_GetSysClockFreq+0xc4>)
 800147a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147c:	220f      	movs	r2, #15
 800147e:	4013      	ands	r3, r2
 8001480:	1d3a      	adds	r2, r7, #4
 8001482:	5cd3      	ldrb	r3, [r2, r3]
 8001484:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001486:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001488:	23c0      	movs	r3, #192	; 0xc0
 800148a:	025b      	lsls	r3, r3, #9
 800148c:	401a      	ands	r2, r3
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	025b      	lsls	r3, r3, #9
 8001492:	429a      	cmp	r2, r3
 8001494:	d109      	bne.n	80014aa <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001496:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001498:	4811      	ldr	r0, [pc, #68]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800149a:	f7fe fe35 	bl	8000108 <__udivsi3>
 800149e:	0003      	movs	r3, r0
 80014a0:	001a      	movs	r2, r3
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	4353      	muls	r3, r2
 80014a6:	637b      	str	r3, [r7, #52]	; 0x34
 80014a8:	e008      	b.n	80014bc <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80014aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014ac:	480c      	ldr	r0, [pc, #48]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80014ae:	f7fe fe2b 	bl	8000108 <__udivsi3>
 80014b2:	0003      	movs	r3, r0
 80014b4:	001a      	movs	r2, r3
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	4353      	muls	r3, r2
 80014ba:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80014bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014be:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014c0:	e002      	b.n	80014c8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014c2:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80014c4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014c6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80014c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80014ca:	0018      	movs	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b00f      	add	sp, #60	; 0x3c
 80014d0:	bd90      	pop	{r4, r7, pc}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	08003474 	.word	0x08003474
 80014d8:	08003484 	.word	0x08003484
 80014dc:	40021000 	.word	0x40021000
 80014e0:	007a1200 	.word	0x007a1200

080014e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014e8:	4b02      	ldr	r3, [pc, #8]	; (80014f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80014ea:	681b      	ldr	r3, [r3, #0]
}
 80014ec:	0018      	movs	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	20000000 	.word	0x20000000

080014f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80014fc:	f7ff fff2 	bl	80014e4 <HAL_RCC_GetHCLKFreq>
 8001500:	0001      	movs	r1, r0
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	0a1b      	lsrs	r3, r3, #8
 8001508:	2207      	movs	r2, #7
 800150a:	4013      	ands	r3, r2
 800150c:	4a04      	ldr	r2, [pc, #16]	; (8001520 <HAL_RCC_GetPCLK1Freq+0x28>)
 800150e:	5cd3      	ldrb	r3, [r2, r3]
 8001510:	40d9      	lsrs	r1, r3
 8001512:	000b      	movs	r3, r1
}    
 8001514:	0018      	movs	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	40021000 	.word	0x40021000
 8001520:	080034ac 	.word	0x080034ac

08001524 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2207      	movs	r2, #7
 8001532:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001534:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <HAL_RCC_GetClockConfig+0x4c>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2203      	movs	r2, #3
 800153a:	401a      	ands	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <HAL_RCC_GetClockConfig+0x4c>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	22f0      	movs	r2, #240	; 0xf0
 8001546:	401a      	ands	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <HAL_RCC_GetClockConfig+0x4c>)
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	23e0      	movs	r3, #224	; 0xe0
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	401a      	ands	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <HAL_RCC_GetClockConfig+0x50>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2201      	movs	r2, #1
 8001560:	401a      	ands	r2, r3
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	601a      	str	r2, [r3, #0]
}
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	46bd      	mov	sp, r7
 800156a:	b002      	add	sp, #8
 800156c:	bd80      	pop	{r7, pc}
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	40021000 	.word	0x40021000
 8001574:	40022000 	.word	0x40022000

08001578 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e042      	b.n	8001610 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	223d      	movs	r2, #61	; 0x3d
 800158e:	5c9b      	ldrb	r3, [r3, r2]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d107      	bne.n	80015a6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	223c      	movs	r2, #60	; 0x3c
 800159a:	2100      	movs	r1, #0
 800159c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	0018      	movs	r0, r3
 80015a2:	f000 f839 	bl	8001618 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	223d      	movs	r2, #61	; 0x3d
 80015aa:	2102      	movs	r1, #2
 80015ac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	3304      	adds	r3, #4
 80015b6:	0019      	movs	r1, r3
 80015b8:	0010      	movs	r0, r2
 80015ba:	f000 f9b7 	bl	800192c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2246      	movs	r2, #70	; 0x46
 80015c2:	2101      	movs	r1, #1
 80015c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	223e      	movs	r2, #62	; 0x3e
 80015ca:	2101      	movs	r1, #1
 80015cc:	5499      	strb	r1, [r3, r2]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	223f      	movs	r2, #63	; 0x3f
 80015d2:	2101      	movs	r1, #1
 80015d4:	5499      	strb	r1, [r3, r2]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2240      	movs	r2, #64	; 0x40
 80015da:	2101      	movs	r1, #1
 80015dc:	5499      	strb	r1, [r3, r2]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2241      	movs	r2, #65	; 0x41
 80015e2:	2101      	movs	r1, #1
 80015e4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2242      	movs	r2, #66	; 0x42
 80015ea:	2101      	movs	r1, #1
 80015ec:	5499      	strb	r1, [r3, r2]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2243      	movs	r2, #67	; 0x43
 80015f2:	2101      	movs	r1, #1
 80015f4:	5499      	strb	r1, [r3, r2]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2244      	movs	r2, #68	; 0x44
 80015fa:	2101      	movs	r1, #1
 80015fc:	5499      	strb	r1, [r3, r2]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2245      	movs	r2, #69	; 0x45
 8001602:	2101      	movs	r1, #1
 8001604:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	223d      	movs	r2, #61	; 0x3d
 800160a:	2101      	movs	r1, #1
 800160c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800160e:	2300      	movs	r3, #0
}
 8001610:	0018      	movs	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	b002      	add	sp, #8
 8001616:	bd80      	pop	{r7, pc}

08001618 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001620:	46c0      	nop			; (mov r8, r8)
 8001622:	46bd      	mov	sp, r7
 8001624:	b002      	add	sp, #8
 8001626:	bd80      	pop	{r7, pc}

08001628 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	223d      	movs	r2, #61	; 0x3d
 8001634:	5c9b      	ldrb	r3, [r3, r2]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b01      	cmp	r3, #1
 800163a:	d001      	beq.n	8001640 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e035      	b.n	80016ac <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	223d      	movs	r2, #61	; 0x3d
 8001644:	2102      	movs	r1, #2
 8001646:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	68da      	ldr	r2, [r3, #12]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2101      	movs	r1, #1
 8001654:	430a      	orrs	r2, r1
 8001656:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a15      	ldr	r2, [pc, #84]	; (80016b4 <HAL_TIM_Base_Start_IT+0x8c>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d009      	beq.n	8001676 <HAL_TIM_Base_Start_IT+0x4e>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a14      	ldr	r2, [pc, #80]	; (80016b8 <HAL_TIM_Base_Start_IT+0x90>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d004      	beq.n	8001676 <HAL_TIM_Base_Start_IT+0x4e>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a12      	ldr	r2, [pc, #72]	; (80016bc <HAL_TIM_Base_Start_IT+0x94>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d111      	bne.n	800169a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	2207      	movs	r2, #7
 800167e:	4013      	ands	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2b06      	cmp	r3, #6
 8001686:	d010      	beq.n	80016aa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2101      	movs	r1, #1
 8001694:	430a      	orrs	r2, r1
 8001696:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001698:	e007      	b.n	80016aa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2101      	movs	r1, #1
 80016a6:	430a      	orrs	r2, r1
 80016a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	0018      	movs	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	b004      	add	sp, #16
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40012c00 	.word	0x40012c00
 80016b8:	40000400 	.word	0x40000400
 80016bc:	40014000 	.word	0x40014000

080016c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	2202      	movs	r2, #2
 80016d0:	4013      	ands	r3, r2
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d124      	bne.n	8001720 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	2202      	movs	r2, #2
 80016de:	4013      	ands	r3, r2
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d11d      	bne.n	8001720 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2203      	movs	r2, #3
 80016ea:	4252      	negs	r2, r2
 80016ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	2203      	movs	r2, #3
 80016fc:	4013      	ands	r3, r2
 80016fe:	d004      	beq.n	800170a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	0018      	movs	r0, r3
 8001704:	f000 f8fa 	bl	80018fc <HAL_TIM_IC_CaptureCallback>
 8001708:	e007      	b.n	800171a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	0018      	movs	r0, r3
 800170e:	f000 f8ed 	bl	80018ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	0018      	movs	r0, r3
 8001716:	f000 f8f9 	bl	800190c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	2204      	movs	r2, #4
 8001728:	4013      	ands	r3, r2
 800172a:	2b04      	cmp	r3, #4
 800172c:	d125      	bne.n	800177a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	2204      	movs	r2, #4
 8001736:	4013      	ands	r3, r2
 8001738:	2b04      	cmp	r3, #4
 800173a:	d11e      	bne.n	800177a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2205      	movs	r2, #5
 8001742:	4252      	negs	r2, r2
 8001744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2202      	movs	r2, #2
 800174a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	699a      	ldr	r2, [r3, #24]
 8001752:	23c0      	movs	r3, #192	; 0xc0
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4013      	ands	r3, r2
 8001758:	d004      	beq.n	8001764 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	0018      	movs	r0, r3
 800175e:	f000 f8cd 	bl	80018fc <HAL_TIM_IC_CaptureCallback>
 8001762:	e007      	b.n	8001774 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	0018      	movs	r0, r3
 8001768:	f000 f8c0 	bl	80018ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	0018      	movs	r0, r3
 8001770:	f000 f8cc 	bl	800190c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	2208      	movs	r2, #8
 8001782:	4013      	ands	r3, r2
 8001784:	2b08      	cmp	r3, #8
 8001786:	d124      	bne.n	80017d2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	2208      	movs	r2, #8
 8001790:	4013      	ands	r3, r2
 8001792:	2b08      	cmp	r3, #8
 8001794:	d11d      	bne.n	80017d2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2209      	movs	r2, #9
 800179c:	4252      	negs	r2, r2
 800179e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2204      	movs	r2, #4
 80017a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	69db      	ldr	r3, [r3, #28]
 80017ac:	2203      	movs	r2, #3
 80017ae:	4013      	ands	r3, r2
 80017b0:	d004      	beq.n	80017bc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	0018      	movs	r0, r3
 80017b6:	f000 f8a1 	bl	80018fc <HAL_TIM_IC_CaptureCallback>
 80017ba:	e007      	b.n	80017cc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	0018      	movs	r0, r3
 80017c0:	f000 f894 	bl	80018ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	0018      	movs	r0, r3
 80017c8:	f000 f8a0 	bl	800190c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	2210      	movs	r2, #16
 80017da:	4013      	ands	r3, r2
 80017dc:	2b10      	cmp	r3, #16
 80017de:	d125      	bne.n	800182c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	2210      	movs	r2, #16
 80017e8:	4013      	ands	r3, r2
 80017ea:	2b10      	cmp	r3, #16
 80017ec:	d11e      	bne.n	800182c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2211      	movs	r2, #17
 80017f4:	4252      	negs	r2, r2
 80017f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2208      	movs	r2, #8
 80017fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	69da      	ldr	r2, [r3, #28]
 8001804:	23c0      	movs	r3, #192	; 0xc0
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4013      	ands	r3, r2
 800180a:	d004      	beq.n	8001816 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	0018      	movs	r0, r3
 8001810:	f000 f874 	bl	80018fc <HAL_TIM_IC_CaptureCallback>
 8001814:	e007      	b.n	8001826 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	0018      	movs	r0, r3
 800181a:	f000 f867 	bl	80018ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	0018      	movs	r0, r3
 8001822:	f000 f873 	bl	800190c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	2201      	movs	r2, #1
 8001834:	4013      	ands	r3, r2
 8001836:	2b01      	cmp	r3, #1
 8001838:	d10f      	bne.n	800185a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	2201      	movs	r2, #1
 8001842:	4013      	ands	r3, r2
 8001844:	2b01      	cmp	r3, #1
 8001846:	d108      	bne.n	800185a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2202      	movs	r2, #2
 800184e:	4252      	negs	r2, r2
 8001850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	0018      	movs	r0, r3
 8001856:	f7fe fe3f 	bl	80004d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	2280      	movs	r2, #128	; 0x80
 8001862:	4013      	ands	r3, r2
 8001864:	2b80      	cmp	r3, #128	; 0x80
 8001866:	d10f      	bne.n	8001888 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	2280      	movs	r2, #128	; 0x80
 8001870:	4013      	ands	r3, r2
 8001872:	2b80      	cmp	r3, #128	; 0x80
 8001874:	d108      	bne.n	8001888 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2281      	movs	r2, #129	; 0x81
 800187c:	4252      	negs	r2, r2
 800187e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	0018      	movs	r0, r3
 8001884:	f000 f8d0 	bl	8001a28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	2240      	movs	r2, #64	; 0x40
 8001890:	4013      	ands	r3, r2
 8001892:	2b40      	cmp	r3, #64	; 0x40
 8001894:	d10f      	bne.n	80018b6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	2240      	movs	r2, #64	; 0x40
 800189e:	4013      	ands	r3, r2
 80018a0:	2b40      	cmp	r3, #64	; 0x40
 80018a2:	d108      	bne.n	80018b6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2241      	movs	r2, #65	; 0x41
 80018aa:	4252      	negs	r2, r2
 80018ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	0018      	movs	r0, r3
 80018b2:	f000 f833 	bl	800191c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	2220      	movs	r2, #32
 80018be:	4013      	ands	r3, r2
 80018c0:	2b20      	cmp	r3, #32
 80018c2:	d10f      	bne.n	80018e4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	2220      	movs	r2, #32
 80018cc:	4013      	ands	r3, r2
 80018ce:	2b20      	cmp	r3, #32
 80018d0:	d108      	bne.n	80018e4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2221      	movs	r2, #33	; 0x21
 80018d8:	4252      	negs	r2, r2
 80018da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	0018      	movs	r0, r3
 80018e0:	f000 f89a 	bl	8001a18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018e4:	46c0      	nop			; (mov r8, r8)
 80018e6:	46bd      	mov	sp, r7
 80018e8:	b002      	add	sp, #8
 80018ea:	bd80      	pop	{r7, pc}

080018ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80018f4:	46c0      	nop			; (mov r8, r8)
 80018f6:	46bd      	mov	sp, r7
 80018f8:	b002      	add	sp, #8
 80018fa:	bd80      	pop	{r7, pc}

080018fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001904:	46c0      	nop			; (mov r8, r8)
 8001906:	46bd      	mov	sp, r7
 8001908:	b002      	add	sp, #8
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001914:	46c0      	nop			; (mov r8, r8)
 8001916:	46bd      	mov	sp, r7
 8001918:	b002      	add	sp, #8
 800191a:	bd80      	pop	{r7, pc}

0800191c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001924:	46c0      	nop			; (mov r8, r8)
 8001926:	46bd      	mov	sp, r7
 8001928:	b002      	add	sp, #8
 800192a:	bd80      	pop	{r7, pc}

0800192c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a2f      	ldr	r2, [pc, #188]	; (80019fc <TIM_Base_SetConfig+0xd0>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d003      	beq.n	800194c <TIM_Base_SetConfig+0x20>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a2e      	ldr	r2, [pc, #184]	; (8001a00 <TIM_Base_SetConfig+0xd4>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d108      	bne.n	800195e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2270      	movs	r2, #112	; 0x70
 8001950:	4393      	bics	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	4313      	orrs	r3, r2
 800195c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a26      	ldr	r2, [pc, #152]	; (80019fc <TIM_Base_SetConfig+0xd0>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d013      	beq.n	800198e <TIM_Base_SetConfig+0x62>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a25      	ldr	r2, [pc, #148]	; (8001a00 <TIM_Base_SetConfig+0xd4>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d00f      	beq.n	800198e <TIM_Base_SetConfig+0x62>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a24      	ldr	r2, [pc, #144]	; (8001a04 <TIM_Base_SetConfig+0xd8>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d00b      	beq.n	800198e <TIM_Base_SetConfig+0x62>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a23      	ldr	r2, [pc, #140]	; (8001a08 <TIM_Base_SetConfig+0xdc>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d007      	beq.n	800198e <TIM_Base_SetConfig+0x62>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a22      	ldr	r2, [pc, #136]	; (8001a0c <TIM_Base_SetConfig+0xe0>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d003      	beq.n	800198e <TIM_Base_SetConfig+0x62>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a21      	ldr	r2, [pc, #132]	; (8001a10 <TIM_Base_SetConfig+0xe4>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d108      	bne.n	80019a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	4a20      	ldr	r2, [pc, #128]	; (8001a14 <TIM_Base_SetConfig+0xe8>)
 8001992:	4013      	ands	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	4313      	orrs	r3, r2
 800199e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2280      	movs	r2, #128	; 0x80
 80019a4:	4393      	bics	r3, r2
 80019a6:	001a      	movs	r2, r3
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <TIM_Base_SetConfig+0xd0>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d00b      	beq.n	80019e6 <TIM_Base_SetConfig+0xba>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a0d      	ldr	r2, [pc, #52]	; (8001a08 <TIM_Base_SetConfig+0xdc>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d007      	beq.n	80019e6 <TIM_Base_SetConfig+0xba>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a0c      	ldr	r2, [pc, #48]	; (8001a0c <TIM_Base_SetConfig+0xe0>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d003      	beq.n	80019e6 <TIM_Base_SetConfig+0xba>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a0b      	ldr	r2, [pc, #44]	; (8001a10 <TIM_Base_SetConfig+0xe4>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d103      	bne.n	80019ee <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	691a      	ldr	r2, [r3, #16]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	615a      	str	r2, [r3, #20]
}
 80019f4:	46c0      	nop			; (mov r8, r8)
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b004      	add	sp, #16
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40012c00 	.word	0x40012c00
 8001a00:	40000400 	.word	0x40000400
 8001a04:	40002000 	.word	0x40002000
 8001a08:	40014000 	.word	0x40014000
 8001a0c:	40014400 	.word	0x40014400
 8001a10:	40014800 	.word	0x40014800
 8001a14:	fffffcff 	.word	0xfffffcff

08001a18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a20:	46c0      	nop			; (mov r8, r8)
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b002      	add	sp, #8
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a30:	46c0      	nop			; (mov r8, r8)
 8001a32:	46bd      	mov	sp, r7
 8001a34:	b002      	add	sp, #8
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e044      	b.n	8001ad4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d107      	bne.n	8001a62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2274      	movs	r2, #116	; 0x74
 8001a56:	2100      	movs	r1, #0
 8001a58:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f7fe fd7d 	bl	800055c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2224      	movs	r2, #36	; 0x24
 8001a66:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2101      	movs	r1, #1
 8001a74:	438a      	bics	r2, r1
 8001a76:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f000 f8da 	bl	8001c34 <UART_SetConfig>
 8001a80:	0003      	movs	r3, r0
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d101      	bne.n	8001a8a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e024      	b.n	8001ad4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	0018      	movs	r0, r3
 8001a96:	f000 fa25 	bl	8001ee4 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	490d      	ldr	r1, [pc, #52]	; (8001adc <HAL_UART_Init+0xa4>)
 8001aa6:	400a      	ands	r2, r1
 8001aa8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2108      	movs	r1, #8
 8001ab6:	438a      	bics	r2, r1
 8001ab8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	0018      	movs	r0, r3
 8001ace:	f000 fabd 	bl	800204c <UART_CheckIdleState>
 8001ad2:	0003      	movs	r3, r0
}
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	b002      	add	sp, #8
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	fffff7ff 	.word	0xfffff7ff

08001ae0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08a      	sub	sp, #40	; 0x28
 8001ae4:	af02      	add	r7, sp, #8
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	1dbb      	adds	r3, r7, #6
 8001aee:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001af4:	2b20      	cmp	r3, #32
 8001af6:	d000      	beq.n	8001afa <HAL_UART_Transmit+0x1a>
 8001af8:	e096      	b.n	8001c28 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_UART_Transmit+0x28>
 8001b00:	1dbb      	adds	r3, r7, #6
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e08e      	b.n	8001c2a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	2380      	movs	r3, #128	; 0x80
 8001b12:	015b      	lsls	r3, r3, #5
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d109      	bne.n	8001b2c <HAL_UART_Transmit+0x4c>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d105      	bne.n	8001b2c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	2201      	movs	r2, #1
 8001b24:	4013      	ands	r3, r2
 8001b26:	d001      	beq.n	8001b2c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e07e      	b.n	8001c2a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2274      	movs	r2, #116	; 0x74
 8001b30:	5c9b      	ldrb	r3, [r3, r2]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d101      	bne.n	8001b3a <HAL_UART_Transmit+0x5a>
 8001b36:	2302      	movs	r3, #2
 8001b38:	e077      	b.n	8001c2a <HAL_UART_Transmit+0x14a>
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2274      	movs	r2, #116	; 0x74
 8001b3e:	2101      	movs	r1, #1
 8001b40:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2280      	movs	r2, #128	; 0x80
 8001b46:	2100      	movs	r1, #0
 8001b48:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2221      	movs	r2, #33	; 0x21
 8001b4e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b50:	f7fe fe16 	bl	8000780 <HAL_GetTick>
 8001b54:	0003      	movs	r3, r0
 8001b56:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	1dba      	adds	r2, r7, #6
 8001b5c:	2150      	movs	r1, #80	; 0x50
 8001b5e:	8812      	ldrh	r2, [r2, #0]
 8001b60:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1dba      	adds	r2, r7, #6
 8001b66:	2152      	movs	r1, #82	; 0x52
 8001b68:	8812      	ldrh	r2, [r2, #0]
 8001b6a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	2380      	movs	r3, #128	; 0x80
 8001b72:	015b      	lsls	r3, r3, #5
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d108      	bne.n	8001b8a <HAL_UART_Transmit+0xaa>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d104      	bne.n	8001b8a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	61bb      	str	r3, [r7, #24]
 8001b88:	e003      	b.n	8001b92 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2274      	movs	r2, #116	; 0x74
 8001b96:	2100      	movs	r1, #0
 8001b98:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001b9a:	e02d      	b.n	8001bf8 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	0013      	movs	r3, r2
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2180      	movs	r1, #128	; 0x80
 8001baa:	f000 fa97 	bl	80020dc <UART_WaitOnFlagUntilTimeout>
 8001bae:	1e03      	subs	r3, r0, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e039      	b.n	8001c2a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10b      	bne.n	8001bd4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	881a      	ldrh	r2, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	05d2      	lsls	r2, r2, #23
 8001bc6:	0dd2      	lsrs	r2, r2, #23
 8001bc8:	b292      	uxth	r2, r2
 8001bca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	3302      	adds	r3, #2
 8001bd0:	61bb      	str	r3, [r7, #24]
 8001bd2:	e008      	b.n	8001be6 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	781a      	ldrb	r2, [r3, #0]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	b292      	uxth	r2, r2
 8001bde:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	3301      	adds	r3, #1
 8001be4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2252      	movs	r2, #82	; 0x52
 8001bea:	5a9b      	ldrh	r3, [r3, r2]
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	b299      	uxth	r1, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2252      	movs	r2, #82	; 0x52
 8001bf6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2252      	movs	r2, #82	; 0x52
 8001bfc:	5a9b      	ldrh	r3, [r3, r2]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1cb      	bne.n	8001b9c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	0013      	movs	r3, r2
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2140      	movs	r1, #64	; 0x40
 8001c12:	f000 fa63 	bl	80020dc <UART_WaitOnFlagUntilTimeout>
 8001c16:	1e03      	subs	r3, r0, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e005      	b.n	8001c2a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2220      	movs	r2, #32
 8001c22:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001c24:	2300      	movs	r3, #0
 8001c26:	e000      	b.n	8001c2a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001c28:	2302      	movs	r3, #2
  }
}
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	b008      	add	sp, #32
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b088      	sub	sp, #32
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c3c:	231e      	movs	r3, #30
 8001c3e:	18fb      	adds	r3, r7, r3
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	431a      	orrs	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a97      	ldr	r2, [pc, #604]	; (8001ec0 <UART_SetConfig+0x28c>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	0019      	movs	r1, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	4a92      	ldr	r2, [pc, #584]	; (8001ec4 <UART_SetConfig+0x290>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	0019      	movs	r1, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	4a89      	ldr	r2, [pc, #548]	; (8001ec8 <UART_SetConfig+0x294>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	0019      	movs	r1, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a85      	ldr	r2, [pc, #532]	; (8001ecc <UART_SetConfig+0x298>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d127      	bne.n	8001d0a <UART_SetConfig+0xd6>
 8001cba:	4b85      	ldr	r3, [pc, #532]	; (8001ed0 <UART_SetConfig+0x29c>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	2203      	movs	r2, #3
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	d00d      	beq.n	8001ce2 <UART_SetConfig+0xae>
 8001cc6:	d81b      	bhi.n	8001d00 <UART_SetConfig+0xcc>
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d014      	beq.n	8001cf6 <UART_SetConfig+0xc2>
 8001ccc:	d818      	bhi.n	8001d00 <UART_SetConfig+0xcc>
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d002      	beq.n	8001cd8 <UART_SetConfig+0xa4>
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d00a      	beq.n	8001cec <UART_SetConfig+0xb8>
 8001cd6:	e013      	b.n	8001d00 <UART_SetConfig+0xcc>
 8001cd8:	231f      	movs	r3, #31
 8001cda:	18fb      	adds	r3, r7, r3
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]
 8001ce0:	e035      	b.n	8001d4e <UART_SetConfig+0x11a>
 8001ce2:	231f      	movs	r3, #31
 8001ce4:	18fb      	adds	r3, r7, r3
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	701a      	strb	r2, [r3, #0]
 8001cea:	e030      	b.n	8001d4e <UART_SetConfig+0x11a>
 8001cec:	231f      	movs	r3, #31
 8001cee:	18fb      	adds	r3, r7, r3
 8001cf0:	2204      	movs	r2, #4
 8001cf2:	701a      	strb	r2, [r3, #0]
 8001cf4:	e02b      	b.n	8001d4e <UART_SetConfig+0x11a>
 8001cf6:	231f      	movs	r3, #31
 8001cf8:	18fb      	adds	r3, r7, r3
 8001cfa:	2208      	movs	r2, #8
 8001cfc:	701a      	strb	r2, [r3, #0]
 8001cfe:	e026      	b.n	8001d4e <UART_SetConfig+0x11a>
 8001d00:	231f      	movs	r3, #31
 8001d02:	18fb      	adds	r3, r7, r3
 8001d04:	2210      	movs	r2, #16
 8001d06:	701a      	strb	r2, [r3, #0]
 8001d08:	e021      	b.n	8001d4e <UART_SetConfig+0x11a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a71      	ldr	r2, [pc, #452]	; (8001ed4 <UART_SetConfig+0x2a0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d104      	bne.n	8001d1e <UART_SetConfig+0xea>
 8001d14:	231f      	movs	r3, #31
 8001d16:	18fb      	adds	r3, r7, r3
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
 8001d1c:	e017      	b.n	8001d4e <UART_SetConfig+0x11a>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a6d      	ldr	r2, [pc, #436]	; (8001ed8 <UART_SetConfig+0x2a4>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d104      	bne.n	8001d32 <UART_SetConfig+0xfe>
 8001d28:	231f      	movs	r3, #31
 8001d2a:	18fb      	adds	r3, r7, r3
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
 8001d30:	e00d      	b.n	8001d4e <UART_SetConfig+0x11a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a69      	ldr	r2, [pc, #420]	; (8001edc <UART_SetConfig+0x2a8>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d104      	bne.n	8001d46 <UART_SetConfig+0x112>
 8001d3c:	231f      	movs	r3, #31
 8001d3e:	18fb      	adds	r3, r7, r3
 8001d40:	2200      	movs	r2, #0
 8001d42:	701a      	strb	r2, [r3, #0]
 8001d44:	e003      	b.n	8001d4e <UART_SetConfig+0x11a>
 8001d46:	231f      	movs	r3, #31
 8001d48:	18fb      	adds	r3, r7, r3
 8001d4a:	2210      	movs	r2, #16
 8001d4c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69da      	ldr	r2, [r3, #28]
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	021b      	lsls	r3, r3, #8
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d15d      	bne.n	8001e16 <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 8001d5a:	231f      	movs	r3, #31
 8001d5c:	18fb      	adds	r3, r7, r3
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d015      	beq.n	8001d90 <UART_SetConfig+0x15c>
 8001d64:	dc18      	bgt.n	8001d98 <UART_SetConfig+0x164>
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	d00d      	beq.n	8001d86 <UART_SetConfig+0x152>
 8001d6a:	dc15      	bgt.n	8001d98 <UART_SetConfig+0x164>
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <UART_SetConfig+0x142>
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d005      	beq.n	8001d80 <UART_SetConfig+0x14c>
 8001d74:	e010      	b.n	8001d98 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001d76:	f7ff fbbf 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 8001d7a:	0003      	movs	r3, r0
 8001d7c:	61bb      	str	r3, [r7, #24]
        break;
 8001d7e:	e012      	b.n	8001da6 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001d80:	4b57      	ldr	r3, [pc, #348]	; (8001ee0 <UART_SetConfig+0x2ac>)
 8001d82:	61bb      	str	r3, [r7, #24]
        break;
 8001d84:	e00f      	b.n	8001da6 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001d86:	f7ff fb47 	bl	8001418 <HAL_RCC_GetSysClockFreq>
 8001d8a:	0003      	movs	r3, r0
 8001d8c:	61bb      	str	r3, [r7, #24]
        break;
 8001d8e:	e00a      	b.n	8001da6 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001d90:	2380      	movs	r3, #128	; 0x80
 8001d92:	021b      	lsls	r3, r3, #8
 8001d94:	61bb      	str	r3, [r7, #24]
        break;
 8001d96:	e006      	b.n	8001da6 <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001d9c:	231e      	movs	r3, #30
 8001d9e:	18fb      	adds	r3, r7, r3
 8001da0:	2201      	movs	r2, #1
 8001da2:	701a      	strb	r2, [r3, #0]
        break;
 8001da4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d100      	bne.n	8001dae <UART_SetConfig+0x17a>
 8001dac:	e07b      	b.n	8001ea6 <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	005a      	lsls	r2, r3, #1
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	085b      	lsrs	r3, r3, #1
 8001db8:	18d2      	adds	r2, r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	0019      	movs	r1, r3
 8001dc0:	0010      	movs	r0, r2
 8001dc2:	f7fe f9a1 	bl	8000108 <__udivsi3>
 8001dc6:	0003      	movs	r3, r0
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	2b0f      	cmp	r3, #15
 8001dd0:	d91c      	bls.n	8001e0c <UART_SetConfig+0x1d8>
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	2380      	movs	r3, #128	; 0x80
 8001dd6:	025b      	lsls	r3, r3, #9
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d217      	bcs.n	8001e0c <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	200e      	movs	r0, #14
 8001de2:	183b      	adds	r3, r7, r0
 8001de4:	210f      	movs	r1, #15
 8001de6:	438a      	bics	r2, r1
 8001de8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	085b      	lsrs	r3, r3, #1
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	2207      	movs	r2, #7
 8001df2:	4013      	ands	r3, r2
 8001df4:	b299      	uxth	r1, r3
 8001df6:	183b      	adds	r3, r7, r0
 8001df8:	183a      	adds	r2, r7, r0
 8001dfa:	8812      	ldrh	r2, [r2, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	183a      	adds	r2, r7, r0
 8001e06:	8812      	ldrh	r2, [r2, #0]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	e04c      	b.n	8001ea6 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8001e0c:	231e      	movs	r3, #30
 8001e0e:	18fb      	adds	r3, r7, r3
 8001e10:	2201      	movs	r2, #1
 8001e12:	701a      	strb	r2, [r3, #0]
 8001e14:	e047      	b.n	8001ea6 <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001e16:	231f      	movs	r3, #31
 8001e18:	18fb      	adds	r3, r7, r3
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	d015      	beq.n	8001e4c <UART_SetConfig+0x218>
 8001e20:	dc18      	bgt.n	8001e54 <UART_SetConfig+0x220>
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d00d      	beq.n	8001e42 <UART_SetConfig+0x20e>
 8001e26:	dc15      	bgt.n	8001e54 <UART_SetConfig+0x220>
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <UART_SetConfig+0x1fe>
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d005      	beq.n	8001e3c <UART_SetConfig+0x208>
 8001e30:	e010      	b.n	8001e54 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e32:	f7ff fb61 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 8001e36:	0003      	movs	r3, r0
 8001e38:	61bb      	str	r3, [r7, #24]
        break;
 8001e3a:	e012      	b.n	8001e62 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001e3c:	4b28      	ldr	r3, [pc, #160]	; (8001ee0 <UART_SetConfig+0x2ac>)
 8001e3e:	61bb      	str	r3, [r7, #24]
        break;
 8001e40:	e00f      	b.n	8001e62 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001e42:	f7ff fae9 	bl	8001418 <HAL_RCC_GetSysClockFreq>
 8001e46:	0003      	movs	r3, r0
 8001e48:	61bb      	str	r3, [r7, #24]
        break;
 8001e4a:	e00a      	b.n	8001e62 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001e4c:	2380      	movs	r3, #128	; 0x80
 8001e4e:	021b      	lsls	r3, r3, #8
 8001e50:	61bb      	str	r3, [r7, #24]
        break;
 8001e52:	e006      	b.n	8001e62 <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001e58:	231e      	movs	r3, #30
 8001e5a:	18fb      	adds	r3, r7, r3
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	701a      	strb	r2, [r3, #0]
        break;
 8001e60:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d01e      	beq.n	8001ea6 <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	085a      	lsrs	r2, r3, #1
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	18d2      	adds	r2, r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	0019      	movs	r1, r3
 8001e78:	0010      	movs	r0, r2
 8001e7a:	f7fe f945 	bl	8000108 <__udivsi3>
 8001e7e:	0003      	movs	r3, r0
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	2b0f      	cmp	r3, #15
 8001e88:	d909      	bls.n	8001e9e <UART_SetConfig+0x26a>
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	025b      	lsls	r3, r3, #9
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d204      	bcs.n	8001e9e <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	60da      	str	r2, [r3, #12]
 8001e9c:	e003      	b.n	8001ea6 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8001e9e:	231e      	movs	r3, #30
 8001ea0:	18fb      	adds	r3, r7, r3
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8001eb2:	231e      	movs	r3, #30
 8001eb4:	18fb      	adds	r3, r7, r3
 8001eb6:	781b      	ldrb	r3, [r3, #0]
}
 8001eb8:	0018      	movs	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	b008      	add	sp, #32
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	efff69f3 	.word	0xefff69f3
 8001ec4:	ffffcfff 	.word	0xffffcfff
 8001ec8:	fffff4ff 	.word	0xfffff4ff
 8001ecc:	40013800 	.word	0x40013800
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40004400 	.word	0x40004400
 8001ed8:	40004800 	.word	0x40004800
 8001edc:	40004c00 	.word	0x40004c00
 8001ee0:	007a1200 	.word	0x007a1200

08001ee4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d00b      	beq.n	8001f0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	4a4a      	ldr	r2, [pc, #296]	; (8002028 <UART_AdvFeatureConfig+0x144>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	0019      	movs	r1, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f12:	2202      	movs	r2, #2
 8001f14:	4013      	ands	r3, r2
 8001f16:	d00b      	beq.n	8001f30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	4a43      	ldr	r2, [pc, #268]	; (800202c <UART_AdvFeatureConfig+0x148>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	0019      	movs	r1, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	2204      	movs	r2, #4
 8001f36:	4013      	ands	r3, r2
 8001f38:	d00b      	beq.n	8001f52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	4a3b      	ldr	r2, [pc, #236]	; (8002030 <UART_AdvFeatureConfig+0x14c>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	0019      	movs	r1, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f56:	2208      	movs	r2, #8
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d00b      	beq.n	8001f74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	4a34      	ldr	r2, [pc, #208]	; (8002034 <UART_AdvFeatureConfig+0x150>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	0019      	movs	r1, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	2210      	movs	r2, #16
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d00b      	beq.n	8001f96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	4a2c      	ldr	r2, [pc, #176]	; (8002038 <UART_AdvFeatureConfig+0x154>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	0019      	movs	r1, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d00b      	beq.n	8001fb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	4a25      	ldr	r2, [pc, #148]	; (800203c <UART_AdvFeatureConfig+0x158>)
 8001fa8:	4013      	ands	r3, r2
 8001faa:	0019      	movs	r1, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbc:	2240      	movs	r2, #64	; 0x40
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d01d      	beq.n	8001ffe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	4a1d      	ldr	r2, [pc, #116]	; (8002040 <UART_AdvFeatureConfig+0x15c>)
 8001fca:	4013      	ands	r3, r2
 8001fcc:	0019      	movs	r1, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fde:	2380      	movs	r3, #128	; 0x80
 8001fe0:	035b      	lsls	r3, r3, #13
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d10b      	bne.n	8001ffe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	4a15      	ldr	r2, [pc, #84]	; (8002044 <UART_AdvFeatureConfig+0x160>)
 8001fee:	4013      	ands	r3, r2
 8001ff0:	0019      	movs	r1, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002002:	2280      	movs	r2, #128	; 0x80
 8002004:	4013      	ands	r3, r2
 8002006:	d00b      	beq.n	8002020 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	4a0e      	ldr	r2, [pc, #56]	; (8002048 <UART_AdvFeatureConfig+0x164>)
 8002010:	4013      	ands	r3, r2
 8002012:	0019      	movs	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	605a      	str	r2, [r3, #4]
  }
}
 8002020:	46c0      	nop			; (mov r8, r8)
 8002022:	46bd      	mov	sp, r7
 8002024:	b002      	add	sp, #8
 8002026:	bd80      	pop	{r7, pc}
 8002028:	fffdffff 	.word	0xfffdffff
 800202c:	fffeffff 	.word	0xfffeffff
 8002030:	fffbffff 	.word	0xfffbffff
 8002034:	ffff7fff 	.word	0xffff7fff
 8002038:	ffffefff 	.word	0xffffefff
 800203c:	ffffdfff 	.word	0xffffdfff
 8002040:	ffefffff 	.word	0xffefffff
 8002044:	ff9fffff 	.word	0xff9fffff
 8002048:	fff7ffff 	.word	0xfff7ffff

0800204c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af02      	add	r7, sp, #8
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2280      	movs	r2, #128	; 0x80
 8002058:	2100      	movs	r1, #0
 800205a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800205c:	f7fe fb90 	bl	8000780 <HAL_GetTick>
 8002060:	0003      	movs	r3, r0
 8002062:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2208      	movs	r2, #8
 800206c:	4013      	ands	r3, r2
 800206e:	2b08      	cmp	r3, #8
 8002070:	d10c      	bne.n	800208c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2280      	movs	r2, #128	; 0x80
 8002076:	0391      	lsls	r1, r2, #14
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	4a17      	ldr	r2, [pc, #92]	; (80020d8 <UART_CheckIdleState+0x8c>)
 800207c:	9200      	str	r2, [sp, #0]
 800207e:	2200      	movs	r2, #0
 8002080:	f000 f82c 	bl	80020dc <UART_WaitOnFlagUntilTimeout>
 8002084:	1e03      	subs	r3, r0, #0
 8002086:	d001      	beq.n	800208c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e021      	b.n	80020d0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2204      	movs	r2, #4
 8002094:	4013      	ands	r3, r2
 8002096:	2b04      	cmp	r3, #4
 8002098:	d10c      	bne.n	80020b4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2280      	movs	r2, #128	; 0x80
 800209e:	03d1      	lsls	r1, r2, #15
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	4a0d      	ldr	r2, [pc, #52]	; (80020d8 <UART_CheckIdleState+0x8c>)
 80020a4:	9200      	str	r2, [sp, #0]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f000 f818 	bl	80020dc <UART_WaitOnFlagUntilTimeout>
 80020ac:	1e03      	subs	r3, r0, #0
 80020ae:	d001      	beq.n	80020b4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e00d      	b.n	80020d0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2220      	movs	r2, #32
 80020b8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2220      	movs	r2, #32
 80020be:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2274      	movs	r2, #116	; 0x74
 80020ca:	2100      	movs	r1, #0
 80020cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	0018      	movs	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	b004      	add	sp, #16
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	01ffffff 	.word	0x01ffffff

080020dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b094      	sub	sp, #80	; 0x50
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	603b      	str	r3, [r7, #0]
 80020e8:	1dfb      	adds	r3, r7, #7
 80020ea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020ec:	e0a3      	b.n	8002236 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020f0:	3301      	adds	r3, #1
 80020f2:	d100      	bne.n	80020f6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80020f4:	e09f      	b.n	8002236 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020f6:	f7fe fb43 	bl	8000780 <HAL_GetTick>
 80020fa:	0002      	movs	r2, r0
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002102:	429a      	cmp	r2, r3
 8002104:	d302      	bcc.n	800210c <UART_WaitOnFlagUntilTimeout+0x30>
 8002106:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002108:	2b00      	cmp	r3, #0
 800210a:	d13d      	bne.n	8002188 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800210c:	f3ef 8310 	mrs	r3, PRIMASK
 8002110:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002112:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002114:	647b      	str	r3, [r7, #68]	; 0x44
 8002116:	2301      	movs	r3, #1
 8002118:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800211a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800211c:	f383 8810 	msr	PRIMASK, r3
}
 8002120:	46c0      	nop			; (mov r8, r8)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	494c      	ldr	r1, [pc, #304]	; (8002260 <UART_WaitOnFlagUntilTimeout+0x184>)
 800212e:	400a      	ands	r2, r1
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002134:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002138:	f383 8810 	msr	PRIMASK, r3
}
 800213c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800213e:	f3ef 8310 	mrs	r3, PRIMASK
 8002142:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002146:	643b      	str	r3, [r7, #64]	; 0x40
 8002148:	2301      	movs	r3, #1
 800214a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800214c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800214e:	f383 8810 	msr	PRIMASK, r3
}
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2101      	movs	r1, #1
 8002160:	438a      	bics	r2, r1
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002166:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800216a:	f383 8810 	msr	PRIMASK, r3
}
 800216e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2220      	movs	r2, #32
 8002174:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2220      	movs	r2, #32
 800217a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2274      	movs	r2, #116	; 0x74
 8002180:	2100      	movs	r1, #0
 8002182:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e067      	b.n	8002258 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2204      	movs	r2, #4
 8002190:	4013      	ands	r3, r2
 8002192:	d050      	beq.n	8002236 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	69da      	ldr	r2, [r3, #28]
 800219a:	2380      	movs	r3, #128	; 0x80
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	401a      	ands	r2, r3
 80021a0:	2380      	movs	r3, #128	; 0x80
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d146      	bne.n	8002236 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2280      	movs	r2, #128	; 0x80
 80021ae:	0112      	lsls	r2, r2, #4
 80021b0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021b2:	f3ef 8310 	mrs	r3, PRIMASK
 80021b6:	613b      	str	r3, [r7, #16]
  return(result);
 80021b8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021bc:	2301      	movs	r3, #1
 80021be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	f383 8810 	msr	PRIMASK, r3
}
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4923      	ldr	r1, [pc, #140]	; (8002260 <UART_WaitOnFlagUntilTimeout+0x184>)
 80021d4:	400a      	ands	r2, r1
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	f383 8810 	msr	PRIMASK, r3
}
 80021e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021e4:	f3ef 8310 	mrs	r3, PRIMASK
 80021e8:	61fb      	str	r3, [r7, #28]
  return(result);
 80021ea:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80021ee:	2301      	movs	r3, #1
 80021f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021f2:	6a3b      	ldr	r3, [r7, #32]
 80021f4:	f383 8810 	msr	PRIMASK, r3
}
 80021f8:	46c0      	nop			; (mov r8, r8)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2101      	movs	r1, #1
 8002206:	438a      	bics	r2, r1
 8002208:	609a      	str	r2, [r3, #8]
 800220a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	f383 8810 	msr	PRIMASK, r3
}
 8002214:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2220      	movs	r2, #32
 800221a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2220      	movs	r2, #32
 8002220:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2280      	movs	r2, #128	; 0x80
 8002226:	2120      	movs	r1, #32
 8002228:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2274      	movs	r2, #116	; 0x74
 800222e:	2100      	movs	r1, #0
 8002230:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e010      	b.n	8002258 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	4013      	ands	r3, r2
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	425a      	negs	r2, r3
 8002246:	4153      	adcs	r3, r2
 8002248:	b2db      	uxtb	r3, r3
 800224a:	001a      	movs	r2, r3
 800224c:	1dfb      	adds	r3, r7, #7
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d100      	bne.n	8002256 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002254:	e74b      	b.n	80020ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	0018      	movs	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	b014      	add	sp, #80	; 0x50
 800225e:	bd80      	pop	{r7, pc}
 8002260:	fffffe5f 	.word	0xfffffe5f

08002264 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	0002      	movs	r2, r0
 800226c:	1dbb      	adds	r3, r7, #6
 800226e:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002270:	2300      	movs	r3, #0
 8002272:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002274:	1dbb      	adds	r3, r7, #6
 8002276:	2200      	movs	r2, #0
 8002278:	5e9b      	ldrsh	r3, [r3, r2]
 800227a:	2b84      	cmp	r3, #132	; 0x84
 800227c:	d006      	beq.n	800228c <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 800227e:	1dbb      	adds	r3, r7, #6
 8002280:	2200      	movs	r2, #0
 8002282:	5e9a      	ldrsh	r2, [r3, r2]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	18d3      	adds	r3, r2, r3
 8002288:	3303      	adds	r3, #3
 800228a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800228c:	68fb      	ldr	r3, [r7, #12]
}
 800228e:	0018      	movs	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	b004      	add	sp, #16
 8002294:	bd80      	pop	{r7, pc}

08002296 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800229a:	f000 faa1 	bl	80027e0 <vTaskStartScheduler>
  
  return osOK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	0018      	movs	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80022a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022a8:	b089      	sub	sp, #36	; 0x24
 80022aa:	af04      	add	r7, sp, #16
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d020      	beq.n	80022fa <osThreadCreate+0x54>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d01c      	beq.n	80022fa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685c      	ldr	r4, [r3, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681d      	ldr	r5, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691e      	ldr	r6, [r3, #16]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2208      	movs	r2, #8
 80022d0:	5e9b      	ldrsh	r3, [r3, r2]
 80022d2:	0018      	movs	r0, r3
 80022d4:	f7ff ffc6 	bl	8002264 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	695a      	ldr	r2, [r3, #20]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80022e0:	6839      	ldr	r1, [r7, #0]
 80022e2:	9302      	str	r3, [sp, #8]
 80022e4:	9201      	str	r2, [sp, #4]
 80022e6:	9000      	str	r0, [sp, #0]
 80022e8:	000b      	movs	r3, r1
 80022ea:	0032      	movs	r2, r6
 80022ec:	0029      	movs	r1, r5
 80022ee:	0020      	movs	r0, r4
 80022f0:	f000 f8e3 	bl	80024ba <xTaskCreateStatic>
 80022f4:	0003      	movs	r3, r0
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	e01d      	b.n	8002336 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685c      	ldr	r4, [r3, #4]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002306:	b29e      	uxth	r6, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2208      	movs	r2, #8
 800230c:	5e9b      	ldrsh	r3, [r3, r2]
 800230e:	0018      	movs	r0, r3
 8002310:	f7ff ffa8 	bl	8002264 <makeFreeRtosPriority>
 8002314:	0001      	movs	r1, r0
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	230c      	movs	r3, #12
 800231a:	18fb      	adds	r3, r7, r3
 800231c:	9301      	str	r3, [sp, #4]
 800231e:	9100      	str	r1, [sp, #0]
 8002320:	0013      	movs	r3, r2
 8002322:	0032      	movs	r2, r6
 8002324:	0029      	movs	r1, r5
 8002326:	0020      	movs	r0, r4
 8002328:	f000 f90a 	bl	8002540 <xTaskCreate>
 800232c:	0003      	movs	r3, r0
 800232e:	2b01      	cmp	r3, #1
 8002330:	d001      	beq.n	8002336 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8002332:	2300      	movs	r3, #0
 8002334:	e000      	b.n	8002338 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002336:	68fb      	ldr	r3, [r7, #12]
}
 8002338:	0018      	movs	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	b005      	add	sp, #20
 800233e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002340 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <osDelay+0x16>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	e000      	b.n	8002358 <osDelay+0x18>
 8002356:	2301      	movs	r3, #1
 8002358:	0018      	movs	r0, r3
 800235a:	f000 fa1b 	bl	8002794 <vTaskDelay>
  
  return osOK;
 800235e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002360:	0018      	movs	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	b004      	add	sp, #16
 8002366:	bd80      	pop	{r7, pc}

08002368 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3308      	adds	r3, #8
 8002374:	001a      	movs	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	4252      	negs	r2, r2
 8002380:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3308      	adds	r3, #8
 8002386:	001a      	movs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3308      	adds	r3, #8
 8002390:	001a      	movs	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800239c:	46c0      	nop			; (mov r8, r8)
 800239e:	46bd      	mov	sp, r7
 80023a0:	b002      	add	sp, #8
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	46bd      	mov	sp, r7
 80023b6:	b002      	add	sp, #8
 80023b8:	bd80      	pop	{r7, pc}

080023ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b084      	sub	sp, #16
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	1c5a      	adds	r2, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	601a      	str	r2, [r3, #0]
}
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	46bd      	mov	sp, r7
 80023fa:	b004      	add	sp, #16
 80023fc:	bd80      	pop	{r7, pc}

080023fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b084      	sub	sp, #16
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	3301      	adds	r3, #1
 8002412:	d103      	bne.n	800241c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	e00c      	b.n	8002436 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3308      	adds	r3, #8
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	e002      	b.n	800242a <vListInsert+0x2c>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	429a      	cmp	r2, r3
 8002434:	d2f6      	bcs.n	8002424 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	601a      	str	r2, [r3, #0]
}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	46bd      	mov	sp, r7
 8002466:	b004      	add	sp, #16
 8002468:	bd80      	pop	{r7, pc}

0800246a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b084      	sub	sp, #16
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6892      	ldr	r2, [r2, #8]
 8002480:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	6852      	ldr	r2, [r2, #4]
 800248a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	429a      	cmp	r2, r3
 8002494:	d103      	bne.n	800249e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	1e5a      	subs	r2, r3, #1
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
}
 80024b2:	0018      	movs	r0, r3
 80024b4:	46bd      	mov	sp, r7
 80024b6:	b004      	add	sp, #16
 80024b8:	bd80      	pop	{r7, pc}

080024ba <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80024ba:	b590      	push	{r4, r7, lr}
 80024bc:	b08d      	sub	sp, #52	; 0x34
 80024be:	af04      	add	r7, sp, #16
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	607a      	str	r2, [r7, #4]
 80024c6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80024c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <xTaskCreateStatic+0x18>
 80024ce:	b672      	cpsid	i
 80024d0:	e7fe      	b.n	80024d0 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80024d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <xTaskCreateStatic+0x22>
 80024d8:	b672      	cpsid	i
 80024da:	e7fe      	b.n	80024da <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80024dc:	2354      	movs	r3, #84	; 0x54
 80024de:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	2b54      	cmp	r3, #84	; 0x54
 80024e4:	d001      	beq.n	80024ea <xTaskCreateStatic+0x30>
 80024e6:	b672      	cpsid	i
 80024e8:	e7fe      	b.n	80024e8 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80024ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d020      	beq.n	8002532 <xTaskCreateStatic+0x78>
 80024f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d01d      	beq.n	8002532 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80024f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f8:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024fe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	2251      	movs	r2, #81	; 0x51
 8002504:	2102      	movs	r1, #2
 8002506:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002508:	683c      	ldr	r4, [r7, #0]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	68b9      	ldr	r1, [r7, #8]
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	2300      	movs	r3, #0
 8002512:	9303      	str	r3, [sp, #12]
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	9302      	str	r3, [sp, #8]
 8002518:	2318      	movs	r3, #24
 800251a:	18fb      	adds	r3, r7, r3
 800251c:	9301      	str	r3, [sp, #4]
 800251e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	0023      	movs	r3, r4
 8002524:	f000 f858 	bl	80025d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	0018      	movs	r0, r3
 800252c:	f000 f8ce 	bl	80026cc <prvAddNewTaskToReadyList>
 8002530:	e001      	b.n	8002536 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8002532:	2300      	movs	r3, #0
 8002534:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002536:	69bb      	ldr	r3, [r7, #24]
	}
 8002538:	0018      	movs	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	b009      	add	sp, #36	; 0x24
 800253e:	bd90      	pop	{r4, r7, pc}

08002540 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002540:	b590      	push	{r4, r7, lr}
 8002542:	b08d      	sub	sp, #52	; 0x34
 8002544:	af04      	add	r7, sp, #16
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	603b      	str	r3, [r7, #0]
 800254c:	1dbb      	adds	r3, r7, #6
 800254e:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002550:	1dbb      	adds	r3, r7, #6
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	0018      	movs	r0, r3
 8002558:	f000 fd82 	bl	8003060 <pvPortMalloc>
 800255c:	0003      	movs	r3, r0
 800255e:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d010      	beq.n	8002588 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002566:	2054      	movs	r0, #84	; 0x54
 8002568:	f000 fd7a 	bl	8003060 <pvPortMalloc>
 800256c:	0003      	movs	r3, r0
 800256e:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	631a      	str	r2, [r3, #48]	; 0x30
 800257c:	e006      	b.n	800258c <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	0018      	movs	r0, r3
 8002582:	f000 fe13 	bl	80031ac <vPortFree>
 8002586:	e001      	b.n	800258c <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002588:	2300      	movs	r3, #0
 800258a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d01a      	beq.n	80025c8 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	2251      	movs	r2, #81	; 0x51
 8002596:	2100      	movs	r1, #0
 8002598:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800259a:	1dbb      	adds	r3, r7, #6
 800259c:	881a      	ldrh	r2, [r3, #0]
 800259e:	683c      	ldr	r4, [r7, #0]
 80025a0:	68b9      	ldr	r1, [r7, #8]
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	2300      	movs	r3, #0
 80025a6:	9303      	str	r3, [sp, #12]
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	9302      	str	r3, [sp, #8]
 80025ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ae:	9301      	str	r3, [sp, #4]
 80025b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	0023      	movs	r3, r4
 80025b6:	f000 f80f 	bl	80025d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	0018      	movs	r0, r3
 80025be:	f000 f885 	bl	80026cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80025c2:	2301      	movs	r3, #1
 80025c4:	61bb      	str	r3, [r7, #24]
 80025c6:	e002      	b.n	80025ce <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80025c8:	2301      	movs	r3, #1
 80025ca:	425b      	negs	r3, r3
 80025cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80025ce:	69bb      	ldr	r3, [r7, #24]
	}
 80025d0:	0018      	movs	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	b009      	add	sp, #36	; 0x24
 80025d6:	bd90      	pop	{r4, r7, pc}

080025d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
 80025e4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80025e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4936      	ldr	r1, [pc, #216]	; (80026c8 <prvInitialiseNewTask+0xf0>)
 80025ee:	468c      	mov	ip, r1
 80025f0:	4463      	add	r3, ip
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	18d3      	adds	r3, r2, r3
 80025f6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	2207      	movs	r2, #7
 80025fc:	4393      	bics	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	2207      	movs	r2, #7
 8002604:	4013      	ands	r3, r2
 8002606:	d001      	beq.n	800260c <prvInitialiseNewTask+0x34>
 8002608:	b672      	cpsid	i
 800260a:	e7fe      	b.n	800260a <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	e013      	b.n	800263a <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	18d3      	adds	r3, r2, r3
 8002618:	7818      	ldrb	r0, [r3, #0]
 800261a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800261c:	2134      	movs	r1, #52	; 0x34
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	18d3      	adds	r3, r2, r3
 8002622:	185b      	adds	r3, r3, r1
 8002624:	1c02      	adds	r2, r0, #0
 8002626:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	18d3      	adds	r3, r2, r3
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d006      	beq.n	8002642 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	3301      	adds	r3, #1
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	2b0f      	cmp	r3, #15
 800263e:	d9e8      	bls.n	8002612 <prvInitialiseNewTask+0x3a>
 8002640:	e000      	b.n	8002644 <prvInitialiseNewTask+0x6c>
		{
			break;
 8002642:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002646:	2243      	movs	r2, #67	; 0x43
 8002648:	2100      	movs	r1, #0
 800264a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	2b06      	cmp	r3, #6
 8002650:	d901      	bls.n	8002656 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002652:	2306      	movs	r3, #6
 8002654:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002658:	6a3a      	ldr	r2, [r7, #32]
 800265a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800265c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265e:	6a3a      	ldr	r2, [r7, #32]
 8002660:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002664:	2200      	movs	r2, #0
 8002666:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266a:	3304      	adds	r3, #4
 800266c:	0018      	movs	r0, r3
 800266e:	f7ff fe99 	bl	80023a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002674:	3318      	adds	r3, #24
 8002676:	0018      	movs	r0, r3
 8002678:	f7ff fe94 	bl	80023a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800267c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002680:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002682:	6a3b      	ldr	r3, [r7, #32]
 8002684:	2207      	movs	r2, #7
 8002686:	1ad2      	subs	r2, r2, r3
 8002688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800268c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002690:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002694:	2200      	movs	r2, #0
 8002696:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269a:	2250      	movs	r2, #80	; 0x50
 800269c:	2100      	movs	r1, #0
 800269e:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	68f9      	ldr	r1, [r7, #12]
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	0018      	movs	r0, r3
 80026a8:	f000 fba8 	bl	8002dfc <pxPortInitialiseStack>
 80026ac:	0002      	movs	r2, r0
 80026ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	46bd      	mov	sp, r7
 80026c2:	b006      	add	sp, #24
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	3fffffff 	.word	0x3fffffff

080026cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80026d4:	f000 fc2c 	bl	8002f30 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80026d8:	4b28      	ldr	r3, [pc, #160]	; (800277c <prvAddNewTaskToReadyList+0xb0>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	4b27      	ldr	r3, [pc, #156]	; (800277c <prvAddNewTaskToReadyList+0xb0>)
 80026e0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80026e2:	4b27      	ldr	r3, [pc, #156]	; (8002780 <prvAddNewTaskToReadyList+0xb4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d109      	bne.n	80026fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80026ea:	4b25      	ldr	r3, [pc, #148]	; (8002780 <prvAddNewTaskToReadyList+0xb4>)
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80026f0:	4b22      	ldr	r3, [pc, #136]	; (800277c <prvAddNewTaskToReadyList+0xb0>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d110      	bne.n	800271a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80026f8:	f000 fa6e 	bl	8002bd8 <prvInitialiseTaskLists>
 80026fc:	e00d      	b.n	800271a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80026fe:	4b21      	ldr	r3, [pc, #132]	; (8002784 <prvAddNewTaskToReadyList+0xb8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d109      	bne.n	800271a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002706:	4b1e      	ldr	r3, [pc, #120]	; (8002780 <prvAddNewTaskToReadyList+0xb4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002710:	429a      	cmp	r2, r3
 8002712:	d802      	bhi.n	800271a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002714:	4b1a      	ldr	r3, [pc, #104]	; (8002780 <prvAddNewTaskToReadyList+0xb4>)
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800271a:	4b1b      	ldr	r3, [pc, #108]	; (8002788 <prvAddNewTaskToReadyList+0xbc>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	1c5a      	adds	r2, r3, #1
 8002720:	4b19      	ldr	r3, [pc, #100]	; (8002788 <prvAddNewTaskToReadyList+0xbc>)
 8002722:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002728:	4b18      	ldr	r3, [pc, #96]	; (800278c <prvAddNewTaskToReadyList+0xc0>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d903      	bls.n	8002738 <prvAddNewTaskToReadyList+0x6c>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002734:	4b15      	ldr	r3, [pc, #84]	; (800278c <prvAddNewTaskToReadyList+0xc0>)
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800273c:	0013      	movs	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	189b      	adds	r3, r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4a12      	ldr	r2, [pc, #72]	; (8002790 <prvAddNewTaskToReadyList+0xc4>)
 8002746:	189a      	adds	r2, r3, r2
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3304      	adds	r3, #4
 800274c:	0019      	movs	r1, r3
 800274e:	0010      	movs	r0, r2
 8002750:	f7ff fe33 	bl	80023ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002754:	f000 fbfe 	bl	8002f54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002758:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <prvAddNewTaskToReadyList+0xb8>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002760:	4b07      	ldr	r3, [pc, #28]	; (8002780 <prvAddNewTaskToReadyList+0xb4>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276a:	429a      	cmp	r2, r3
 800276c:	d201      	bcs.n	8002772 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800276e:	f000 fbcf 	bl	8002f10 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002772:	46c0      	nop			; (mov r8, r8)
 8002774:	46bd      	mov	sp, r7
 8002776:	b002      	add	sp, #8
 8002778:	bd80      	pop	{r7, pc}
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	20000454 	.word	0x20000454
 8002780:	20000354 	.word	0x20000354
 8002784:	20000460 	.word	0x20000460
 8002788:	20000470 	.word	0x20000470
 800278c:	2000045c 	.word	0x2000045c
 8002790:	20000358 	.word	0x20000358

08002794 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800279c:	2300      	movs	r3, #0
 800279e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d010      	beq.n	80027c8 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80027a6:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <vTaskDelay+0x48>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <vTaskDelay+0x1e>
 80027ae:	b672      	cpsid	i
 80027b0:	e7fe      	b.n	80027b0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80027b2:	f000 f863 	bl	800287c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2100      	movs	r1, #0
 80027ba:	0018      	movs	r0, r3
 80027bc:	f000 faca 	bl	8002d54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80027c0:	f000 f868 	bl	8002894 <xTaskResumeAll>
 80027c4:	0003      	movs	r3, r0
 80027c6:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80027ce:	f000 fb9f 	bl	8002f10 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	46bd      	mov	sp, r7
 80027d6:	b004      	add	sp, #16
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	2000047c 	.word	0x2000047c

080027e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80027e0:	b590      	push	{r4, r7, lr}
 80027e2:	b089      	sub	sp, #36	; 0x24
 80027e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80027ee:	003a      	movs	r2, r7
 80027f0:	1d39      	adds	r1, r7, #4
 80027f2:	2308      	movs	r3, #8
 80027f4:	18fb      	adds	r3, r7, r3
 80027f6:	0018      	movs	r0, r3
 80027f8:	f7fd fd12 	bl	8000220 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80027fc:	683c      	ldr	r4, [r7, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	4918      	ldr	r1, [pc, #96]	; (8002864 <vTaskStartScheduler+0x84>)
 8002804:	4818      	ldr	r0, [pc, #96]	; (8002868 <vTaskStartScheduler+0x88>)
 8002806:	9202      	str	r2, [sp, #8]
 8002808:	9301      	str	r3, [sp, #4]
 800280a:	2300      	movs	r3, #0
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	2300      	movs	r3, #0
 8002810:	0022      	movs	r2, r4
 8002812:	f7ff fe52 	bl	80024ba <xTaskCreateStatic>
 8002816:	0002      	movs	r2, r0
 8002818:	4b14      	ldr	r3, [pc, #80]	; (800286c <vTaskStartScheduler+0x8c>)
 800281a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800281c:	4b13      	ldr	r3, [pc, #76]	; (800286c <vTaskStartScheduler+0x8c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d002      	beq.n	800282a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002824:	2301      	movs	r3, #1
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	e001      	b.n	800282e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d10d      	bne.n	8002850 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8002834:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002836:	4b0e      	ldr	r3, [pc, #56]	; (8002870 <vTaskStartScheduler+0x90>)
 8002838:	2201      	movs	r2, #1
 800283a:	4252      	negs	r2, r2
 800283c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800283e:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <vTaskStartScheduler+0x94>)
 8002840:	2201      	movs	r2, #1
 8002842:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002844:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <vTaskStartScheduler+0x98>)
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800284a:	f000 fb3d 	bl	8002ec8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800284e:	e004      	b.n	800285a <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	3301      	adds	r3, #1
 8002854:	d101      	bne.n	800285a <vTaskStartScheduler+0x7a>
 8002856:	b672      	cpsid	i
 8002858:	e7fe      	b.n	8002858 <vTaskStartScheduler+0x78>
}
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	46bd      	mov	sp, r7
 800285e:	b005      	add	sp, #20
 8002860:	bd90      	pop	{r4, r7, pc}
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	08003494 	.word	0x08003494
 8002868:	08002bb9 	.word	0x08002bb9
 800286c:	20000478 	.word	0x20000478
 8002870:	20000474 	.word	0x20000474
 8002874:	20000460 	.word	0x20000460
 8002878:	20000458 	.word	0x20000458

0800287c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002880:	4b03      	ldr	r3, [pc, #12]	; (8002890 <vTaskSuspendAll+0x14>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	4b02      	ldr	r3, [pc, #8]	; (8002890 <vTaskSuspendAll+0x14>)
 8002888:	601a      	str	r2, [r3, #0]
}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	2000047c 	.word	0x2000047c

08002894 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800289a:	2300      	movs	r3, #0
 800289c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800289e:	2300      	movs	r3, #0
 80028a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80028a2:	4b3a      	ldr	r3, [pc, #232]	; (800298c <xTaskResumeAll+0xf8>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <xTaskResumeAll+0x1a>
 80028aa:	b672      	cpsid	i
 80028ac:	e7fe      	b.n	80028ac <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80028ae:	f000 fb3f 	bl	8002f30 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80028b2:	4b36      	ldr	r3, [pc, #216]	; (800298c <xTaskResumeAll+0xf8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	1e5a      	subs	r2, r3, #1
 80028b8:	4b34      	ldr	r3, [pc, #208]	; (800298c <xTaskResumeAll+0xf8>)
 80028ba:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028bc:	4b33      	ldr	r3, [pc, #204]	; (800298c <xTaskResumeAll+0xf8>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d15b      	bne.n	800297c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80028c4:	4b32      	ldr	r3, [pc, #200]	; (8002990 <xTaskResumeAll+0xfc>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d057      	beq.n	800297c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80028cc:	e02f      	b.n	800292e <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80028ce:	4b31      	ldr	r3, [pc, #196]	; (8002994 <xTaskResumeAll+0x100>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	3318      	adds	r3, #24
 80028da:	0018      	movs	r0, r3
 80028dc:	f7ff fdc5 	bl	800246a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	3304      	adds	r3, #4
 80028e4:	0018      	movs	r0, r3
 80028e6:	f7ff fdc0 	bl	800246a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ee:	4b2a      	ldr	r3, [pc, #168]	; (8002998 <xTaskResumeAll+0x104>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d903      	bls.n	80028fe <xTaskResumeAll+0x6a>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028fa:	4b27      	ldr	r3, [pc, #156]	; (8002998 <xTaskResumeAll+0x104>)
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002902:	0013      	movs	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	189b      	adds	r3, r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4a24      	ldr	r2, [pc, #144]	; (800299c <xTaskResumeAll+0x108>)
 800290c:	189a      	adds	r2, r3, r2
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	3304      	adds	r3, #4
 8002912:	0019      	movs	r1, r3
 8002914:	0010      	movs	r0, r2
 8002916:	f7ff fd50 	bl	80023ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800291e:	4b20      	ldr	r3, [pc, #128]	; (80029a0 <xTaskResumeAll+0x10c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002924:	429a      	cmp	r2, r3
 8002926:	d302      	bcc.n	800292e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8002928:	4b1e      	ldr	r3, [pc, #120]	; (80029a4 <xTaskResumeAll+0x110>)
 800292a:	2201      	movs	r2, #1
 800292c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800292e:	4b19      	ldr	r3, [pc, #100]	; (8002994 <xTaskResumeAll+0x100>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1cb      	bne.n	80028ce <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800293c:	f000 f9e6 	bl	8002d0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002940:	4b19      	ldr	r3, [pc, #100]	; (80029a8 <xTaskResumeAll+0x114>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00f      	beq.n	800296c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800294c:	f000 f82e 	bl	80029ac <xTaskIncrementTick>
 8002950:	1e03      	subs	r3, r0, #0
 8002952:	d002      	beq.n	800295a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8002954:	4b13      	ldr	r3, [pc, #76]	; (80029a4 <xTaskResumeAll+0x110>)
 8002956:	2201      	movs	r2, #1
 8002958:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3b01      	subs	r3, #1
 800295e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f2      	bne.n	800294c <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8002966:	4b10      	ldr	r3, [pc, #64]	; (80029a8 <xTaskResumeAll+0x114>)
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800296c:	4b0d      	ldr	r3, [pc, #52]	; (80029a4 <xTaskResumeAll+0x110>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002974:	2301      	movs	r3, #1
 8002976:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002978:	f000 faca 	bl	8002f10 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800297c:	f000 faea 	bl	8002f54 <vPortExitCritical>

	return xAlreadyYielded;
 8002980:	68bb      	ldr	r3, [r7, #8]
}
 8002982:	0018      	movs	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	b004      	add	sp, #16
 8002988:	bd80      	pop	{r7, pc}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	2000047c 	.word	0x2000047c
 8002990:	20000454 	.word	0x20000454
 8002994:	20000414 	.word	0x20000414
 8002998:	2000045c 	.word	0x2000045c
 800299c:	20000358 	.word	0x20000358
 80029a0:	20000354 	.word	0x20000354
 80029a4:	20000468 	.word	0x20000468
 80029a8:	20000464 	.word	0x20000464

080029ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029b6:	4b4c      	ldr	r3, [pc, #304]	; (8002ae8 <xTaskIncrementTick+0x13c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d000      	beq.n	80029c0 <xTaskIncrementTick+0x14>
 80029be:	e083      	b.n	8002ac8 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80029c0:	4b4a      	ldr	r3, [pc, #296]	; (8002aec <xTaskIncrementTick+0x140>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	3301      	adds	r3, #1
 80029c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80029c8:	4b48      	ldr	r3, [pc, #288]	; (8002aec <xTaskIncrementTick+0x140>)
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d117      	bne.n	8002a04 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80029d4:	4b46      	ldr	r3, [pc, #280]	; (8002af0 <xTaskIncrementTick+0x144>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <xTaskIncrementTick+0x36>
 80029de:	b672      	cpsid	i
 80029e0:	e7fe      	b.n	80029e0 <xTaskIncrementTick+0x34>
 80029e2:	4b43      	ldr	r3, [pc, #268]	; (8002af0 <xTaskIncrementTick+0x144>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	4b42      	ldr	r3, [pc, #264]	; (8002af4 <xTaskIncrementTick+0x148>)
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	4b40      	ldr	r3, [pc, #256]	; (8002af0 <xTaskIncrementTick+0x144>)
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	4b40      	ldr	r3, [pc, #256]	; (8002af4 <xTaskIncrementTick+0x148>)
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	4b40      	ldr	r3, [pc, #256]	; (8002af8 <xTaskIncrementTick+0x14c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	1c5a      	adds	r2, r3, #1
 80029fc:	4b3e      	ldr	r3, [pc, #248]	; (8002af8 <xTaskIncrementTick+0x14c>)
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	f000 f984 	bl	8002d0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002a04:	4b3d      	ldr	r3, [pc, #244]	; (8002afc <xTaskIncrementTick+0x150>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d34e      	bcc.n	8002aac <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a0e:	4b38      	ldr	r3, [pc, #224]	; (8002af0 <xTaskIncrementTick+0x144>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <xTaskIncrementTick+0x70>
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e000      	b.n	8002a1e <xTaskIncrementTick+0x72>
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d004      	beq.n	8002a2c <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a22:	4b36      	ldr	r3, [pc, #216]	; (8002afc <xTaskIncrementTick+0x150>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	4252      	negs	r2, r2
 8002a28:	601a      	str	r2, [r3, #0]
					break;
 8002a2a:	e03f      	b.n	8002aac <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a2c:	4b30      	ldr	r3, [pc, #192]	; (8002af0 <xTaskIncrementTick+0x144>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d203      	bcs.n	8002a4c <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002a44:	4b2d      	ldr	r3, [pc, #180]	; (8002afc <xTaskIncrementTick+0x150>)
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	601a      	str	r2, [r3, #0]
						break;
 8002a4a:	e02f      	b.n	8002aac <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	3304      	adds	r3, #4
 8002a50:	0018      	movs	r0, r3
 8002a52:	f7ff fd0a 	bl	800246a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d004      	beq.n	8002a68 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	3318      	adds	r3, #24
 8002a62:	0018      	movs	r0, r3
 8002a64:	f7ff fd01 	bl	800246a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a6c:	4b24      	ldr	r3, [pc, #144]	; (8002b00 <xTaskIncrementTick+0x154>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d903      	bls.n	8002a7c <xTaskIncrementTick+0xd0>
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a78:	4b21      	ldr	r3, [pc, #132]	; (8002b00 <xTaskIncrementTick+0x154>)
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a80:	0013      	movs	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	189b      	adds	r3, r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4a1e      	ldr	r2, [pc, #120]	; (8002b04 <xTaskIncrementTick+0x158>)
 8002a8a:	189a      	adds	r2, r3, r2
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	3304      	adds	r3, #4
 8002a90:	0019      	movs	r1, r3
 8002a92:	0010      	movs	r0, r2
 8002a94:	f7ff fc91 	bl	80023ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a9c:	4b1a      	ldr	r3, [pc, #104]	; (8002b08 <xTaskIncrementTick+0x15c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d3b3      	bcc.n	8002a0e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002aaa:	e7b0      	b.n	8002a0e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002aac:	4b16      	ldr	r3, [pc, #88]	; (8002b08 <xTaskIncrementTick+0x15c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab2:	4914      	ldr	r1, [pc, #80]	; (8002b04 <xTaskIncrementTick+0x158>)
 8002ab4:	0013      	movs	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	189b      	adds	r3, r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	585b      	ldr	r3, [r3, r1]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d907      	bls.n	8002ad2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	e004      	b.n	8002ad2 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002ac8:	4b10      	ldr	r3, [pc, #64]	; (8002b0c <xTaskIncrementTick+0x160>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	1c5a      	adds	r2, r3, #1
 8002ace:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <xTaskIncrementTick+0x160>)
 8002ad0:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002ad2:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <xTaskIncrementTick+0x164>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8002ada:	2301      	movs	r3, #1
 8002adc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002ade:	697b      	ldr	r3, [r7, #20]
}
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b006      	add	sp, #24
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	2000047c 	.word	0x2000047c
 8002aec:	20000458 	.word	0x20000458
 8002af0:	2000040c 	.word	0x2000040c
 8002af4:	20000410 	.word	0x20000410
 8002af8:	2000046c 	.word	0x2000046c
 8002afc:	20000474 	.word	0x20000474
 8002b00:	2000045c 	.word	0x2000045c
 8002b04:	20000358 	.word	0x20000358
 8002b08:	20000354 	.word	0x20000354
 8002b0c:	20000464 	.word	0x20000464
 8002b10:	20000468 	.word	0x20000468

08002b14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002b1a:	4b22      	ldr	r3, [pc, #136]	; (8002ba4 <vTaskSwitchContext+0x90>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002b22:	4b21      	ldr	r3, [pc, #132]	; (8002ba8 <vTaskSwitchContext+0x94>)
 8002b24:	2201      	movs	r2, #1
 8002b26:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002b28:	e037      	b.n	8002b9a <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8002b2a:	4b1f      	ldr	r3, [pc, #124]	; (8002ba8 <vTaskSwitchContext+0x94>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002b30:	4b1e      	ldr	r3, [pc, #120]	; (8002bac <vTaskSwitchContext+0x98>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	607b      	str	r3, [r7, #4]
 8002b36:	e007      	b.n	8002b48 <vTaskSwitchContext+0x34>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <vTaskSwitchContext+0x2e>
 8002b3e:	b672      	cpsid	i
 8002b40:	e7fe      	b.n	8002b40 <vTaskSwitchContext+0x2c>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3b01      	subs	r3, #1
 8002b46:	607b      	str	r3, [r7, #4]
 8002b48:	4919      	ldr	r1, [pc, #100]	; (8002bb0 <vTaskSwitchContext+0x9c>)
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	0013      	movs	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	189b      	adds	r3, r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	585b      	ldr	r3, [r3, r1]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0ee      	beq.n	8002b38 <vTaskSwitchContext+0x24>
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	0013      	movs	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	189b      	adds	r3, r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4a12      	ldr	r2, [pc, #72]	; (8002bb0 <vTaskSwitchContext+0x9c>)
 8002b66:	189b      	adds	r3, r3, r2
 8002b68:	603b      	str	r3, [r7, #0]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	605a      	str	r2, [r3, #4]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	3308      	adds	r3, #8
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d104      	bne.n	8002b8a <vTaskSwitchContext+0x76>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <vTaskSwitchContext+0xa0>)
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	4b05      	ldr	r3, [pc, #20]	; (8002bac <vTaskSwitchContext+0x98>)
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	601a      	str	r2, [r3, #0]
}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	b002      	add	sp, #8
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	46c0      	nop			; (mov r8, r8)
 8002ba4:	2000047c 	.word	0x2000047c
 8002ba8:	20000468 	.word	0x20000468
 8002bac:	2000045c 	.word	0x2000045c
 8002bb0:	20000358 	.word	0x20000358
 8002bb4:	20000354 	.word	0x20000354

08002bb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002bc0:	f000 f84e 	bl	8002c60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002bc4:	4b03      	ldr	r3, [pc, #12]	; (8002bd4 <prvIdleTask+0x1c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d9f9      	bls.n	8002bc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002bcc:	f000 f9a0 	bl	8002f10 <vPortYield>
		prvCheckTasksWaitingTermination();
 8002bd0:	e7f6      	b.n	8002bc0 <prvIdleTask+0x8>
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	20000358 	.word	0x20000358

08002bd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002bde:	2300      	movs	r3, #0
 8002be0:	607b      	str	r3, [r7, #4]
 8002be2:	e00c      	b.n	8002bfe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	0013      	movs	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	189b      	adds	r3, r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4a14      	ldr	r2, [pc, #80]	; (8002c40 <prvInitialiseTaskLists+0x68>)
 8002bf0:	189b      	adds	r3, r3, r2
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f7ff fbb8 	bl	8002368 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	607b      	str	r3, [r7, #4]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b06      	cmp	r3, #6
 8002c02:	d9ef      	bls.n	8002be4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002c04:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <prvInitialiseTaskLists+0x6c>)
 8002c06:	0018      	movs	r0, r3
 8002c08:	f7ff fbae 	bl	8002368 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002c0c:	4b0e      	ldr	r3, [pc, #56]	; (8002c48 <prvInitialiseTaskLists+0x70>)
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f7ff fbaa 	bl	8002368 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002c14:	4b0d      	ldr	r3, [pc, #52]	; (8002c4c <prvInitialiseTaskLists+0x74>)
 8002c16:	0018      	movs	r0, r3
 8002c18:	f7ff fba6 	bl	8002368 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <prvInitialiseTaskLists+0x78>)
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f7ff fba2 	bl	8002368 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002c24:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <prvInitialiseTaskLists+0x7c>)
 8002c26:	0018      	movs	r0, r3
 8002c28:	f7ff fb9e 	bl	8002368 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002c2c:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <prvInitialiseTaskLists+0x80>)
 8002c2e:	4a05      	ldr	r2, [pc, #20]	; (8002c44 <prvInitialiseTaskLists+0x6c>)
 8002c30:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002c32:	4b0a      	ldr	r3, [pc, #40]	; (8002c5c <prvInitialiseTaskLists+0x84>)
 8002c34:	4a04      	ldr	r2, [pc, #16]	; (8002c48 <prvInitialiseTaskLists+0x70>)
 8002c36:	601a      	str	r2, [r3, #0]
}
 8002c38:	46c0      	nop			; (mov r8, r8)
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	b002      	add	sp, #8
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	20000358 	.word	0x20000358
 8002c44:	200003e4 	.word	0x200003e4
 8002c48:	200003f8 	.word	0x200003f8
 8002c4c:	20000414 	.word	0x20000414
 8002c50:	20000428 	.word	0x20000428
 8002c54:	20000440 	.word	0x20000440
 8002c58:	2000040c 	.word	0x2000040c
 8002c5c:	20000410 	.word	0x20000410

08002c60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c66:	e01a      	b.n	8002c9e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8002c68:	f000 f962 	bl	8002f30 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002c6c:	4b10      	ldr	r3, [pc, #64]	; (8002cb0 <prvCheckTasksWaitingTermination+0x50>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3304      	adds	r3, #4
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f7ff fbf6 	bl	800246a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002c7e:	4b0d      	ldr	r3, [pc, #52]	; (8002cb4 <prvCheckTasksWaitingTermination+0x54>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	1e5a      	subs	r2, r3, #1
 8002c84:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <prvCheckTasksWaitingTermination+0x54>)
 8002c86:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <prvCheckTasksWaitingTermination+0x58>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	1e5a      	subs	r2, r3, #1
 8002c8e:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <prvCheckTasksWaitingTermination+0x58>)
 8002c90:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8002c92:	f000 f95f 	bl	8002f54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f000 f80f 	bl	8002cbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c9e:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <prvCheckTasksWaitingTermination+0x58>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1e0      	bne.n	8002c68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	46c0      	nop			; (mov r8, r8)
 8002caa:	46bd      	mov	sp, r7
 8002cac:	b002      	add	sp, #8
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	20000428 	.word	0x20000428
 8002cb4:	20000454 	.word	0x20000454
 8002cb8:	2000043c 	.word	0x2000043c

08002cbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2251      	movs	r2, #81	; 0x51
 8002cc8:	5c9b      	ldrb	r3, [r3, r2]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d109      	bne.n	8002ce2 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f000 fa6a 	bl	80031ac <vPortFree>
				vPortFree( pxTCB );
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f000 fa66 	bl	80031ac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002ce0:	e010      	b.n	8002d04 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2251      	movs	r2, #81	; 0x51
 8002ce6:	5c9b      	ldrb	r3, [r3, r2]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d104      	bne.n	8002cf6 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f000 fa5c 	bl	80031ac <vPortFree>
	}
 8002cf4:	e006      	b.n	8002d04 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2251      	movs	r2, #81	; 0x51
 8002cfa:	5c9b      	ldrb	r3, [r3, r2]
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d001      	beq.n	8002d04 <prvDeleteTCB+0x48>
 8002d00:	b672      	cpsid	i
 8002d02:	e7fe      	b.n	8002d02 <prvDeleteTCB+0x46>
	}
 8002d04:	46c0      	nop			; (mov r8, r8)
 8002d06:	46bd      	mov	sp, r7
 8002d08:	b002      	add	sp, #8
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d12:	4b0e      	ldr	r3, [pc, #56]	; (8002d4c <prvResetNextTaskUnblockTime+0x40>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <prvResetNextTaskUnblockTime+0x14>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <prvResetNextTaskUnblockTime+0x16>
 8002d20:	2300      	movs	r3, #0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d004      	beq.n	8002d30 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002d26:	4b0a      	ldr	r3, [pc, #40]	; (8002d50 <prvResetNextTaskUnblockTime+0x44>)
 8002d28:	2201      	movs	r2, #1
 8002d2a:	4252      	negs	r2, r2
 8002d2c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002d2e:	e008      	b.n	8002d42 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002d30:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <prvResetNextTaskUnblockTime+0x40>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	4b04      	ldr	r3, [pc, #16]	; (8002d50 <prvResetNextTaskUnblockTime+0x44>)
 8002d40:	601a      	str	r2, [r3, #0]
}
 8002d42:	46c0      	nop			; (mov r8, r8)
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b002      	add	sp, #8
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	2000040c 	.word	0x2000040c
 8002d50:	20000474 	.word	0x20000474

08002d54 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002d5e:	4b21      	ldr	r3, [pc, #132]	; (8002de4 <prvAddCurrentTaskToDelayedList+0x90>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d64:	4b20      	ldr	r3, [pc, #128]	; (8002de8 <prvAddCurrentTaskToDelayedList+0x94>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f7ff fb7d 	bl	800246a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3301      	adds	r3, #1
 8002d74:	d10b      	bne.n	8002d8e <prvAddCurrentTaskToDelayedList+0x3a>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d008      	beq.n	8002d8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d7c:	4b1a      	ldr	r3, [pc, #104]	; (8002de8 <prvAddCurrentTaskToDelayedList+0x94>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	1d1a      	adds	r2, r3, #4
 8002d82:	4b1a      	ldr	r3, [pc, #104]	; (8002dec <prvAddCurrentTaskToDelayedList+0x98>)
 8002d84:	0011      	movs	r1, r2
 8002d86:	0018      	movs	r0, r3
 8002d88:	f7ff fb17 	bl	80023ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002d8c:	e026      	b.n	8002ddc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	18d3      	adds	r3, r2, r3
 8002d94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002d96:	4b14      	ldr	r3, [pc, #80]	; (8002de8 <prvAddCurrentTaskToDelayedList+0x94>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d209      	bcs.n	8002dba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002da6:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <prvAddCurrentTaskToDelayedList+0x94>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3304      	adds	r3, #4
 8002db0:	0019      	movs	r1, r3
 8002db2:	0010      	movs	r0, r2
 8002db4:	f7ff fb23 	bl	80023fe <vListInsert>
}
 8002db8:	e010      	b.n	8002ddc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002dba:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <prvAddCurrentTaskToDelayedList+0x94>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	0019      	movs	r1, r3
 8002dc6:	0010      	movs	r0, r2
 8002dc8:	f7ff fb19 	bl	80023fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002dcc:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d202      	bcs.n	8002ddc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8002dd6:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	601a      	str	r2, [r3, #0]
}
 8002ddc:	46c0      	nop			; (mov r8, r8)
 8002dde:	46bd      	mov	sp, r7
 8002de0:	b004      	add	sp, #16
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	20000458 	.word	0x20000458
 8002de8:	20000354 	.word	0x20000354
 8002dec:	20000440 	.word	0x20000440
 8002df0:	20000410 	.word	0x20000410
 8002df4:	2000040c 	.word	0x2000040c
 8002df8:	20000474 	.word	0x20000474

08002dfc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	3b04      	subs	r3, #4
 8002e0c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2280      	movs	r2, #128	; 0x80
 8002e12:	0452      	lsls	r2, r2, #17
 8002e14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	3b04      	subs	r3, #4
 8002e1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	3b04      	subs	r3, #4
 8002e26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002e28:	4a08      	ldr	r2, [pc, #32]	; (8002e4c <pxPortInitialiseStack+0x50>)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	3b14      	subs	r3, #20
 8002e32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	3b20      	subs	r3, #32
 8002e3e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002e40:	68fb      	ldr	r3, [r7, #12]
}
 8002e42:	0018      	movs	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b004      	add	sp, #16
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	08002e51 	.word	0x08002e51

08002e50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002e5a:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <prvTaskExitError+0x2c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	d001      	beq.n	8002e66 <prvTaskExitError+0x16>
 8002e62:	b672      	cpsid	i
 8002e64:	e7fe      	b.n	8002e64 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8002e66:	b672      	cpsid	i
	while( ulDummy == 0 )
 8002e68:	46c0      	nop			; (mov r8, r8)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0fc      	beq.n	8002e6a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002e70:	46c0      	nop			; (mov r8, r8)
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	46bd      	mov	sp, r7
 8002e76:	b002      	add	sp, #8
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	20000008 	.word	0x20000008

08002e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8002e84:	46c0      	nop			; (mov r8, r8)
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	0000      	movs	r0, r0
 8002e8c:	0000      	movs	r0, r0
	...

08002e90 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8002e90:	4a0b      	ldr	r2, [pc, #44]	; (8002ec0 <pxCurrentTCBConst2>)
 8002e92:	6813      	ldr	r3, [r2, #0]
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	3020      	adds	r0, #32
 8002e98:	f380 8809 	msr	PSP, r0
 8002e9c:	2002      	movs	r0, #2
 8002e9e:	f380 8814 	msr	CONTROL, r0
 8002ea2:	f3bf 8f6f 	isb	sy
 8002ea6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8002ea8:	46ae      	mov	lr, r5
 8002eaa:	bc08      	pop	{r3}
 8002eac:	bc04      	pop	{r2}
 8002eae:	b662      	cpsie	i
 8002eb0:	4718      	bx	r3
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	46c0      	nop			; (mov r8, r8)
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	46c0      	nop			; (mov r8, r8)
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	46c0      	nop			; (mov r8, r8)
 8002ebe:	46c0      	nop			; (mov r8, r8)

08002ec0 <pxCurrentTCBConst2>:
 8002ec0:	20000354 	.word	0x20000354
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8002ec4:	46c0      	nop			; (mov r8, r8)
 8002ec6:	46c0      	nop			; (mov r8, r8)

08002ec8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8002ecc:	4b0e      	ldr	r3, [pc, #56]	; (8002f08 <xPortStartScheduler+0x40>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	4b0d      	ldr	r3, [pc, #52]	; (8002f08 <xPortStartScheduler+0x40>)
 8002ed2:	21ff      	movs	r1, #255	; 0xff
 8002ed4:	0409      	lsls	r1, r1, #16
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8002eda:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <xPortStartScheduler+0x40>)
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	4b0a      	ldr	r3, [pc, #40]	; (8002f08 <xPortStartScheduler+0x40>)
 8002ee0:	21ff      	movs	r1, #255	; 0xff
 8002ee2:	0609      	lsls	r1, r1, #24
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8002ee8:	f000 f898 	bl	800301c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002eec:	4b07      	ldr	r3, [pc, #28]	; (8002f0c <xPortStartScheduler+0x44>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8002ef2:	f7ff ffcd 	bl	8002e90 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002ef6:	f7ff fe0d 	bl	8002b14 <vTaskSwitchContext>
	prvTaskExitError();
 8002efa:	f7ff ffa9 	bl	8002e50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	0018      	movs	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	e000ed20 	.word	0xe000ed20
 8002f0c:	20000008 	.word	0x20000008

08002f10 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8002f14:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <vPortYield+0x1c>)
 8002f16:	2280      	movs	r2, #128	; 0x80
 8002f18:	0552      	lsls	r2, r2, #21
 8002f1a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8002f1c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002f20:	f3bf 8f6f 	isb	sy
}
 8002f24:	46c0      	nop			; (mov r8, r8)
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	e000ed04 	.word	0xe000ed04

08002f30 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8002f34:	b672      	cpsid	i
    uxCriticalNesting++;
 8002f36:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <vPortEnterCritical+0x20>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	4b04      	ldr	r3, [pc, #16]	; (8002f50 <vPortEnterCritical+0x20>)
 8002f3e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8002f40:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002f44:	f3bf 8f6f 	isb	sy
}
 8002f48:	46c0      	nop			; (mov r8, r8)
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	20000008 	.word	0x20000008

08002f54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002f58:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <vPortExitCritical+0x2c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <vPortExitCritical+0x10>
 8002f60:	b672      	cpsid	i
 8002f62:	e7fe      	b.n	8002f62 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8002f64:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <vPortExitCritical+0x2c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	1e5a      	subs	r2, r3, #1
 8002f6a:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <vPortExitCritical+0x2c>)
 8002f6c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8002f6e:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <vPortExitCritical+0x2c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d100      	bne.n	8002f78 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8002f76:	b662      	cpsie	i
    }
}
 8002f78:	46c0      	nop			; (mov r8, r8)
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	20000008 	.word	0x20000008

08002f84 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8002f84:	f3ef 8010 	mrs	r0, PRIMASK
 8002f88:	b672      	cpsid	i
 8002f8a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8002f8c:	46c0      	nop			; (mov r8, r8)
 8002f8e:	0018      	movs	r0, r3

08002f90 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8002f90:	f380 8810 	msr	PRIMASK, r0
 8002f94:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8002f96:	46c0      	nop			; (mov r8, r8)
	...

08002fa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002fa0:	f3ef 8009 	mrs	r0, PSP
 8002fa4:	4b0e      	ldr	r3, [pc, #56]	; (8002fe0 <pxCurrentTCBConst>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	3820      	subs	r0, #32
 8002faa:	6010      	str	r0, [r2, #0]
 8002fac:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002fae:	4644      	mov	r4, r8
 8002fb0:	464d      	mov	r5, r9
 8002fb2:	4656      	mov	r6, sl
 8002fb4:	465f      	mov	r7, fp
 8002fb6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002fb8:	b508      	push	{r3, lr}
 8002fba:	b672      	cpsid	i
 8002fbc:	f7ff fdaa 	bl	8002b14 <vTaskSwitchContext>
 8002fc0:	b662      	cpsie	i
 8002fc2:	bc0c      	pop	{r2, r3}
 8002fc4:	6811      	ldr	r1, [r2, #0]
 8002fc6:	6808      	ldr	r0, [r1, #0]
 8002fc8:	3010      	adds	r0, #16
 8002fca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8002fcc:	46a0      	mov	r8, r4
 8002fce:	46a9      	mov	r9, r5
 8002fd0:	46b2      	mov	sl, r6
 8002fd2:	46bb      	mov	fp, r7
 8002fd4:	f380 8809 	msr	PSP, r0
 8002fd8:	3820      	subs	r0, #32
 8002fda:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8002fdc:	4718      	bx	r3
 8002fde:	46c0      	nop			; (mov r8, r8)

08002fe0 <pxCurrentTCBConst>:
 8002fe0:	20000354 	.word	0x20000354
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8002fe4:	46c0      	nop			; (mov r8, r8)
 8002fe6:	46c0      	nop			; (mov r8, r8)

08002fe8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fee:	f7ff ffc9 	bl	8002f84 <ulSetInterruptMaskFromISR>
 8002ff2:	0003      	movs	r3, r0
 8002ff4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002ff6:	f7ff fcd9 	bl	80029ac <xTaskIncrementTick>
 8002ffa:	1e03      	subs	r3, r0, #0
 8002ffc:	d003      	beq.n	8003006 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8002ffe:	4b06      	ldr	r3, [pc, #24]	; (8003018 <SysTick_Handler+0x30>)
 8003000:	2280      	movs	r2, #128	; 0x80
 8003002:	0552      	lsls	r2, r2, #21
 8003004:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	0018      	movs	r0, r3
 800300a:	f7ff ffc1 	bl	8002f90 <vClearInterruptMaskFromISR>
}
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	46bd      	mov	sp, r7
 8003012:	b002      	add	sp, #8
 8003014:	bd80      	pop	{r7, pc}
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	e000ed04 	.word	0xe000ed04

0800301c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8003020:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <prvSetupTimerInterrupt+0x34>)
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8003026:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <prvSetupTimerInterrupt+0x38>)
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800302c:	4b0a      	ldr	r3, [pc, #40]	; (8003058 <prvSetupTimerInterrupt+0x3c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	22fa      	movs	r2, #250	; 0xfa
 8003032:	0091      	lsls	r1, r2, #2
 8003034:	0018      	movs	r0, r3
 8003036:	f7fd f867 	bl	8000108 <__udivsi3>
 800303a:	0003      	movs	r3, r0
 800303c:	001a      	movs	r2, r3
 800303e:	4b07      	ldr	r3, [pc, #28]	; (800305c <prvSetupTimerInterrupt+0x40>)
 8003040:	3a01      	subs	r2, #1
 8003042:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8003044:	4b02      	ldr	r3, [pc, #8]	; (8003050 <prvSetupTimerInterrupt+0x34>)
 8003046:	2207      	movs	r2, #7
 8003048:	601a      	str	r2, [r3, #0]
}
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	e000e010 	.word	0xe000e010
 8003054:	e000e018 	.word	0xe000e018
 8003058:	20000000 	.word	0x20000000
 800305c:	e000e014 	.word	0xe000e014

08003060 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003068:	2300      	movs	r3, #0
 800306a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800306c:	f7ff fc06 	bl	800287c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003070:	4b49      	ldr	r3, [pc, #292]	; (8003198 <pvPortMalloc+0x138>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003078:	f000 f8e0 	bl	800323c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800307c:	4b47      	ldr	r3, [pc, #284]	; (800319c <pvPortMalloc+0x13c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	4013      	ands	r3, r2
 8003084:	d000      	beq.n	8003088 <pvPortMalloc+0x28>
 8003086:	e079      	b.n	800317c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d012      	beq.n	80030b4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800308e:	2208      	movs	r2, #8
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	189b      	adds	r3, r3, r2
 8003094:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2207      	movs	r2, #7
 800309a:	4013      	ands	r3, r2
 800309c:	d00a      	beq.n	80030b4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2207      	movs	r2, #7
 80030a2:	4393      	bics	r3, r2
 80030a4:	3308      	adds	r3, #8
 80030a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2207      	movs	r2, #7
 80030ac:	4013      	ands	r3, r2
 80030ae:	d001      	beq.n	80030b4 <pvPortMalloc+0x54>
 80030b0:	b672      	cpsid	i
 80030b2:	e7fe      	b.n	80030b2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d060      	beq.n	800317c <pvPortMalloc+0x11c>
 80030ba:	4b39      	ldr	r3, [pc, #228]	; (80031a0 <pvPortMalloc+0x140>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d85b      	bhi.n	800317c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80030c4:	4b37      	ldr	r3, [pc, #220]	; (80031a4 <pvPortMalloc+0x144>)
 80030c6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80030c8:	4b36      	ldr	r3, [pc, #216]	; (80031a4 <pvPortMalloc+0x144>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80030ce:	e004      	b.n	80030da <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d903      	bls.n	80030ec <pvPortMalloc+0x8c>
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1f1      	bne.n	80030d0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80030ec:	4b2a      	ldr	r3, [pc, #168]	; (8003198 <pvPortMalloc+0x138>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d042      	beq.n	800317c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2208      	movs	r2, #8
 80030fc:	189b      	adds	r3, r3, r2
 80030fe:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	1ad2      	subs	r2, r2, r3
 8003110:	2308      	movs	r3, #8
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	429a      	cmp	r2, r3
 8003116:	d916      	bls.n	8003146 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	18d3      	adds	r3, r2, r3
 800311e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	2207      	movs	r2, #7
 8003124:	4013      	ands	r3, r2
 8003126:	d001      	beq.n	800312c <pvPortMalloc+0xcc>
 8003128:	b672      	cpsid	i
 800312a:	e7fe      	b.n	800312a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	1ad2      	subs	r2, r2, r3
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	0018      	movs	r0, r3
 8003142:	f000 f8db 	bl	80032fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003146:	4b16      	ldr	r3, [pc, #88]	; (80031a0 <pvPortMalloc+0x140>)
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	1ad2      	subs	r2, r2, r3
 8003150:	4b13      	ldr	r3, [pc, #76]	; (80031a0 <pvPortMalloc+0x140>)
 8003152:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003154:	4b12      	ldr	r3, [pc, #72]	; (80031a0 <pvPortMalloc+0x140>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	4b13      	ldr	r3, [pc, #76]	; (80031a8 <pvPortMalloc+0x148>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	429a      	cmp	r2, r3
 800315e:	d203      	bcs.n	8003168 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003160:	4b0f      	ldr	r3, [pc, #60]	; (80031a0 <pvPortMalloc+0x140>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	4b10      	ldr	r3, [pc, #64]	; (80031a8 <pvPortMalloc+0x148>)
 8003166:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	4b0b      	ldr	r3, [pc, #44]	; (800319c <pvPortMalloc+0x13c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	431a      	orrs	r2, r3
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800317c:	f7ff fb8a 	bl	8002894 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2207      	movs	r2, #7
 8003184:	4013      	ands	r3, r2
 8003186:	d001      	beq.n	800318c <pvPortMalloc+0x12c>
 8003188:	b672      	cpsid	i
 800318a:	e7fe      	b.n	800318a <pvPortMalloc+0x12a>
	return pvReturn;
 800318c:	68fb      	ldr	r3, [r7, #12]
}
 800318e:	0018      	movs	r0, r3
 8003190:	46bd      	mov	sp, r7
 8003192:	b006      	add	sp, #24
 8003194:	bd80      	pop	{r7, pc}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	20001088 	.word	0x20001088
 800319c:	20001094 	.word	0x20001094
 80031a0:	2000108c 	.word	0x2000108c
 80031a4:	20001080 	.word	0x20001080
 80031a8:	20001090 	.word	0x20001090

080031ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d035      	beq.n	800322a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80031be:	2308      	movs	r3, #8
 80031c0:	425b      	negs	r3, r3
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	18d3      	adds	r3, r2, r3
 80031c6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	4b18      	ldr	r3, [pc, #96]	; (8003234 <vPortFree+0x88>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4013      	ands	r3, r2
 80031d6:	d101      	bne.n	80031dc <vPortFree+0x30>
 80031d8:	b672      	cpsid	i
 80031da:	e7fe      	b.n	80031da <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <vPortFree+0x3c>
 80031e4:	b672      	cpsid	i
 80031e6:	e7fe      	b.n	80031e6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	4b11      	ldr	r3, [pc, #68]	; (8003234 <vPortFree+0x88>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4013      	ands	r3, r2
 80031f2:	d01a      	beq.n	800322a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d116      	bne.n	800322a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <vPortFree+0x88>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	43db      	mvns	r3, r3
 8003206:	401a      	ands	r2, r3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800320c:	f7ff fb36 	bl	800287c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	4b08      	ldr	r3, [pc, #32]	; (8003238 <vPortFree+0x8c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	18d2      	adds	r2, r2, r3
 800321a:	4b07      	ldr	r3, [pc, #28]	; (8003238 <vPortFree+0x8c>)
 800321c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	0018      	movs	r0, r3
 8003222:	f000 f86b 	bl	80032fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003226:	f7ff fb35 	bl	8002894 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	46bd      	mov	sp, r7
 800322e:	b004      	add	sp, #16
 8003230:	bd80      	pop	{r7, pc}
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	20001094 	.word	0x20001094
 8003238:	2000108c 	.word	0x2000108c

0800323c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003242:	23c0      	movs	r3, #192	; 0xc0
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003248:	4b26      	ldr	r3, [pc, #152]	; (80032e4 <prvHeapInit+0xa8>)
 800324a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2207      	movs	r2, #7
 8003250:	4013      	ands	r3, r2
 8003252:	d00c      	beq.n	800326e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	3307      	adds	r3, #7
 8003258:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2207      	movs	r2, #7
 800325e:	4393      	bics	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	1ad2      	subs	r2, r2, r3
 8003268:	4b1e      	ldr	r3, [pc, #120]	; (80032e4 <prvHeapInit+0xa8>)
 800326a:	18d3      	adds	r3, r2, r3
 800326c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003272:	4b1d      	ldr	r3, [pc, #116]	; (80032e8 <prvHeapInit+0xac>)
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003278:	4b1b      	ldr	r3, [pc, #108]	; (80032e8 <prvHeapInit+0xac>)
 800327a:	2200      	movs	r2, #0
 800327c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	18d3      	adds	r3, r2, r3
 8003284:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003286:	2208      	movs	r2, #8
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	1a9b      	subs	r3, r3, r2
 800328c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2207      	movs	r2, #7
 8003292:	4393      	bics	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	4b14      	ldr	r3, [pc, #80]	; (80032ec <prvHeapInit+0xb0>)
 800329a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800329c:	4b13      	ldr	r3, [pc, #76]	; (80032ec <prvHeapInit+0xb0>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2200      	movs	r2, #0
 80032a2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80032a4:	4b11      	ldr	r3, [pc, #68]	; (80032ec <prvHeapInit+0xb0>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	1ad2      	subs	r2, r2, r3
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80032ba:	4b0c      	ldr	r3, [pc, #48]	; (80032ec <prvHeapInit+0xb0>)
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <prvHeapInit+0xb4>)
 80032c8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	4b09      	ldr	r3, [pc, #36]	; (80032f4 <prvHeapInit+0xb8>)
 80032d0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80032d2:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <prvHeapInit+0xbc>)
 80032d4:	2280      	movs	r2, #128	; 0x80
 80032d6:	0612      	lsls	r2, r2, #24
 80032d8:	601a      	str	r2, [r3, #0]
}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	46bd      	mov	sp, r7
 80032de:	b004      	add	sp, #16
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	20000480 	.word	0x20000480
 80032e8:	20001080 	.word	0x20001080
 80032ec:	20001088 	.word	0x20001088
 80032f0:	20001090 	.word	0x20001090
 80032f4:	2000108c 	.word	0x2000108c
 80032f8:	20001094 	.word	0x20001094

080032fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003304:	4b27      	ldr	r3, [pc, #156]	; (80033a4 <prvInsertBlockIntoFreeList+0xa8>)
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	e002      	b.n	8003310 <prvInsertBlockIntoFreeList+0x14>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	429a      	cmp	r2, r3
 8003318:	d8f7      	bhi.n	800330a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	18d3      	adds	r3, r2, r3
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	429a      	cmp	r2, r3
 800332a:	d108      	bne.n	800333e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	18d2      	adds	r2, r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	18d2      	adds	r2, r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d118      	bne.n	8003384 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	4b14      	ldr	r3, [pc, #80]	; (80033a8 <prvInsertBlockIntoFreeList+0xac>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d00d      	beq.n	800337a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	18d2      	adds	r2, r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	e008      	b.n	800338c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800337a:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <prvInsertBlockIntoFreeList+0xac>)
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	e003      	b.n	800338c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	429a      	cmp	r2, r3
 8003392:	d002      	beq.n	800339a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	46bd      	mov	sp, r7
 800339e:	b004      	add	sp, #16
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	20001080 	.word	0x20001080
 80033a8:	20001088 	.word	0x20001088

080033ac <__libc_init_array>:
 80033ac:	b570      	push	{r4, r5, r6, lr}
 80033ae:	2600      	movs	r6, #0
 80033b0:	4d0c      	ldr	r5, [pc, #48]	; (80033e4 <__libc_init_array+0x38>)
 80033b2:	4c0d      	ldr	r4, [pc, #52]	; (80033e8 <__libc_init_array+0x3c>)
 80033b4:	1b64      	subs	r4, r4, r5
 80033b6:	10a4      	asrs	r4, r4, #2
 80033b8:	42a6      	cmp	r6, r4
 80033ba:	d109      	bne.n	80033d0 <__libc_init_array+0x24>
 80033bc:	2600      	movs	r6, #0
 80033be:	f000 f821 	bl	8003404 <_init>
 80033c2:	4d0a      	ldr	r5, [pc, #40]	; (80033ec <__libc_init_array+0x40>)
 80033c4:	4c0a      	ldr	r4, [pc, #40]	; (80033f0 <__libc_init_array+0x44>)
 80033c6:	1b64      	subs	r4, r4, r5
 80033c8:	10a4      	asrs	r4, r4, #2
 80033ca:	42a6      	cmp	r6, r4
 80033cc:	d105      	bne.n	80033da <__libc_init_array+0x2e>
 80033ce:	bd70      	pop	{r4, r5, r6, pc}
 80033d0:	00b3      	lsls	r3, r6, #2
 80033d2:	58eb      	ldr	r3, [r5, r3]
 80033d4:	4798      	blx	r3
 80033d6:	3601      	adds	r6, #1
 80033d8:	e7ee      	b.n	80033b8 <__libc_init_array+0xc>
 80033da:	00b3      	lsls	r3, r6, #2
 80033dc:	58eb      	ldr	r3, [r5, r3]
 80033de:	4798      	blx	r3
 80033e0:	3601      	adds	r6, #1
 80033e2:	e7f2      	b.n	80033ca <__libc_init_array+0x1e>
 80033e4:	080034b4 	.word	0x080034b4
 80033e8:	080034b4 	.word	0x080034b4
 80033ec:	080034b4 	.word	0x080034b4
 80033f0:	080034b8 	.word	0x080034b8

080033f4 <memset>:
 80033f4:	0003      	movs	r3, r0
 80033f6:	1882      	adds	r2, r0, r2
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d100      	bne.n	80033fe <memset+0xa>
 80033fc:	4770      	bx	lr
 80033fe:	7019      	strb	r1, [r3, #0]
 8003400:	3301      	adds	r3, #1
 8003402:	e7f9      	b.n	80033f8 <memset+0x4>

08003404 <_init>:
 8003404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800340a:	bc08      	pop	{r3}
 800340c:	469e      	mov	lr, r3
 800340e:	4770      	bx	lr

08003410 <_fini>:
 8003410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003412:	46c0      	nop			; (mov r8, r8)
 8003414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003416:	bc08      	pop	{r3}
 8003418:	469e      	mov	lr, r3
 800341a:	4770      	bx	lr
